
GilBot2021 AutoPilot Driver v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001c48  00001cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000155  0080015e  0080015e  00001d3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d9  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000896  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fab  00000000  00000000  00003c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00004bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000974  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015b1  00000000  00000000  00005894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006e45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      38:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_14>
      3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      48:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_18>
      4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      50:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_20>
      54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      60:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_24>
      64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      68:	1d 02       	muls	r17, r29
      6a:	80 02       	muls	r24, r16
      6c:	80 02       	muls	r24, r16
      6e:	80 02       	muls	r24, r16
      70:	80 02       	muls	r24, r16
      72:	80 02       	muls	r24, r16
      74:	80 02       	muls	r24, r16
      76:	80 02       	muls	r24, r16
      78:	80 02       	muls	r24, r16
      7a:	80 02       	muls	r24, r16
      7c:	80 02       	muls	r24, r16
      7e:	80 02       	muls	r24, r16
      80:	80 02       	muls	r24, r16
      82:	80 02       	muls	r24, r16
      84:	80 02       	muls	r24, r16
      86:	80 02       	muls	r24, r16
      88:	26 02       	muls	r18, r22
      8a:	80 02       	muls	r24, r16
      8c:	80 02       	muls	r24, r16
      8e:	80 02       	muls	r24, r16
      90:	80 02       	muls	r24, r16
      92:	80 02       	muls	r24, r16
      94:	80 02       	muls	r24, r16
      96:	80 02       	muls	r24, r16
      98:	3f 02       	muls	r19, r31
      9a:	80 02       	muls	r24, r16
      9c:	80 02       	muls	r24, r16
      9e:	80 02       	muls	r24, r16
      a0:	80 02       	muls	r24, r16
      a2:	80 02       	muls	r24, r16
      a4:	80 02       	muls	r24, r16
      a6:	80 02       	muls	r24, r16
      a8:	26 02       	muls	r18, r22
      aa:	80 02       	muls	r24, r16
      ac:	80 02       	muls	r24, r16
      ae:	80 02       	muls	r24, r16
      b0:	80 02       	muls	r24, r16
      b2:	80 02       	muls	r24, r16
      b4:	80 02       	muls	r24, r16
      b6:	80 02       	muls	r24, r16
      b8:	3f 02       	muls	r19, r31
      ba:	80 02       	muls	r24, r16
      bc:	80 02       	muls	r24, r16
      be:	80 02       	muls	r24, r16
      c0:	80 02       	muls	r24, r16
      c2:	80 02       	muls	r24, r16
      c4:	80 02       	muls	r24, r16
      c6:	80 02       	muls	r24, r16
      c8:	43 02       	muls	r20, r19
      ca:	80 02       	muls	r24, r16
      cc:	80 02       	muls	r24, r16
      ce:	80 02       	muls	r24, r16
      d0:	80 02       	muls	r24, r16
      d2:	80 02       	muls	r24, r16
      d4:	80 02       	muls	r24, r16
      d6:	80 02       	muls	r24, r16
      d8:	47 02       	muls	r20, r23
      da:	80 02       	muls	r24, r16
      dc:	80 02       	muls	r24, r16
      de:	80 02       	muls	r24, r16
      e0:	80 02       	muls	r24, r16
      e2:	80 02       	muls	r24, r16
      e4:	80 02       	muls	r24, r16
      e6:	80 02       	muls	r24, r16
      e8:	4d 02       	muls	r20, r29
      ea:	80 02       	muls	r24, r16
      ec:	80 02       	muls	r24, r16
      ee:	80 02       	muls	r24, r16
      f0:	80 02       	muls	r24, r16
      f2:	80 02       	muls	r24, r16
      f4:	80 02       	muls	r24, r16
      f6:	80 02       	muls	r24, r16
      f8:	51 02       	muls	r21, r17
      fa:	80 02       	muls	r24, r16
      fc:	80 02       	muls	r24, r16
      fe:	80 02       	muls	r24, r16
     100:	80 02       	muls	r24, r16
     102:	80 02       	muls	r24, r16
     104:	80 02       	muls	r24, r16
     106:	80 02       	muls	r24, r16
     108:	18 02       	muls	r17, r24
     10a:	1b 07       	cpc	r17, r27
     10c:	20 07       	cpc	r18, r16
     10e:	25 07       	cpc	r18, r21
     110:	2a 07       	cpc	r18, r26
     112:	2f 07       	cpc	r18, r31
     114:	34 07       	cpc	r19, r20
     116:	39 07       	cpc	r19, r25
     118:	42 07       	cpc	r20, r18
     11a:	46 07       	cpc	r20, r22
     11c:	69 07       	cpc	r22, r25
     11e:	6e 07       	cpc	r22, r30

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d8 e0       	ldi	r29, 0x08	; 8
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e8 e4       	ldi	r30, 0x48	; 72
     134:	fc e1       	ldi	r31, 0x1C	; 28
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	ae 35       	cpi	r26, 0x5E	; 94
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	22 e0       	ldi	r18, 0x02	; 2
     144:	ae e5       	ldi	r26, 0x5E	; 94
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	a3 3b       	cpi	r26, 0xB3	; 179
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
     152:	0e 94 be 08 	call	0x117c	; 0x117c <main>
     156:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <_exit>

0000015a <__bad_interrupt>:
     15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015e <i2c_received>:
	}
}
void custom_port_output(unsigned char pinNum, unsigned char ctrl){
	if(pinNum == 2 || pinNum == 3){
		if(ctrl) PORTC|=(1<<pinNum);
		else PORTC&=~(1<<pinNum);
     15e:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <i2c_available>
     162:	08 95       	ret

00000164 <serial_rx>:
     164:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <serial_available>
     168:	08 95       	ret

0000016a <uart_init>:
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	8c 01       	movw	r16, r24
     17a:	6a 01       	movw	r12, r20
     17c:	7b 01       	movw	r14, r22
     17e:	c2 2f       	mov	r28, r18
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	74 e9       	ldi	r23, 0x94	; 148
     184:	81 e1       	ldi	r24, 0x11	; 17
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	a7 01       	movw	r20, r14
     18a:	96 01       	movw	r18, r12
     18c:	0e 94 05 0b 	call	0x160a	; 0x160a <__udivmodsi4>
     190:	21 50       	subi	r18, 0x01	; 1
     192:	31 09       	sbc	r19, r1
     194:	10 93 79 01 	sts	0x0179, r17	; 0x800179 <rx_frame_active+0x1>
     198:	00 93 78 01 	sts	0x0178, r16	; 0x800178 <rx_frame_active>
     19c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1a0:	88 ed       	ldi	r24, 0xD8	; 216
     1a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     1ac:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     1b0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     1b4:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <data_length>
     1b8:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <frame_trancing>
     1bc:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <last_word>
     1c0:	78 94       	sei
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	cf 90       	pop	r12
     1d0:	08 95       	ret

000001d2 <out_uart_char>:
     1d2:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <frame_trancing>
     1d6:	21 11       	cpse	r18, r1
     1d8:	24 c0       	rjmp	.+72     	; 0x222 <out_uart_char+0x50>
     1da:	38 e4       	ldi	r19, 0x48	; 72
     1dc:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     1e0:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <uart_i>
     1e4:	66 23       	and	r22, r22
     1e6:	61 f0       	breq	.+24     	; 0x200 <out_uart_char+0x2e>
     1e8:	e8 2f       	mov	r30, r24
     1ea:	f9 2f       	mov	r31, r25
     1ec:	ad ef       	ldi	r26, 0xFD	; 253
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	81 91       	ld	r24, Z+
     1f2:	8d 93       	st	X+, r24
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <uart_i>
     1fa:	62 13       	cpse	r22, r18
     1fc:	f9 cf       	rjmp	.-14     	; 0x1f0 <out_uart_char+0x1e>
     1fe:	26 2f       	mov	r18, r22
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <frame_trancing>
     206:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <data_length>
     20a:	e0 ec       	ldi	r30, 0xC0	; 192
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	85 ff       	sbrs	r24, 5
     212:	fd cf       	rjmp	.-6      	; 0x20e <out_uart_char+0x3c>
     214:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <out_buffer>
     218:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <uart_i>
     222:	08 95       	ret

00000224 <__vector_20>:
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	8f 93       	push	r24
     230:	9f 93       	push	r25
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31
     236:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <frame_trancing>
     23a:	88 23       	and	r24, r24
     23c:	a9 f0       	breq	.+42     	; 0x268 <__vector_20+0x44>
     23e:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <uart_i>
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	8e 0f       	add	r24, r30
     246:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <uart_i>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	e3 50       	subi	r30, 0x03	; 3
     24e:	fe 4f       	sbci	r31, 0xFE	; 254
     250:	80 81       	ld	r24, Z
     252:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     256:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <uart_i>
     25a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <data_length>
     25e:	98 17       	cp	r25, r24
     260:	40 f0       	brcs	.+16     	; 0x272 <__vector_20+0x4e>
     262:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <frame_trancing>
     266:	05 c0       	rjmp	.+10     	; 0x272 <__vector_20+0x4e>
     268:	88 ed       	ldi	r24, 0xD8	; 216
     26a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     26e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <next_data>
     272:	ff 91       	pop	r31
     274:	ef 91       	pop	r30
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <__vector_18>:
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	af 93       	push	r26
     2a0:	bf 93       	push	r27
     2a2:	ef 93       	push	r30
     2a4:	ff 93       	push	r31
     2a6:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <next_data>
     2aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     2ae:	e6 2f       	mov	r30, r22
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	ed 58       	subi	r30, 0x8D	; 141
     2b4:	fd 4f       	sbci	r31, 0xFD	; 253
     2b6:	80 83       	st	Z, r24
     2b8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <last_word>
     2bc:	89 13       	cpse	r24, r25
     2be:	09 c0       	rjmp	.+18     	; 0x2d2 <__vector_18+0x4e>
     2c0:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <rx_frame_active>
     2c4:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <rx_frame_active+0x1>
     2c8:	83 e7       	ldi	r24, 0x73	; 115
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	09 95       	icall
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	05 c0       	rjmp	.+10     	; 0x2dc <__vector_18+0x58>
     2d2:	6e 31       	cpi	r22, 0x1E	; 30
     2d4:	18 f0       	brcs	.+6      	; 0x2dc <__vector_18+0x58>
     2d6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <next_data>
     2da:	03 c0       	rjmp	.+6      	; 0x2e2 <__vector_18+0x5e>
     2dc:	6f 5f       	subi	r22, 0xFF	; 255
     2de:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <next_data>
     2e2:	ff 91       	pop	r31
     2e4:	ef 91       	pop	r30
     2e6:	bf 91       	pop	r27
     2e8:	af 91       	pop	r26
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	7f 91       	pop	r23
     2f0:	6f 91       	pop	r22
     2f2:	5f 91       	pop	r21
     2f4:	4f 91       	pop	r20
     2f6:	3f 91       	pop	r19
     2f8:	2f 91       	pop	r18
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <js_twi_master_init>:
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
     30a:	9a 01       	movw	r18, r20
     30c:	ab 01       	movw	r20, r22
     30e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     312:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     316:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     31a:	8a ef       	ldi	r24, 0xFA	; 250
     31c:	00 00       	nop
     31e:	81 50       	subi	r24, 0x01	; 1
     320:	e9 f7       	brne	.-6      	; 0x31c <js_twi_master_init+0x18>
     322:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e4       	ldi	r23, 0x40	; 64
     32a:	89 e1       	ldi	r24, 0x19	; 25
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 05 0b 	call	0x160a	; 0x160a <__udivmodsi4>
     332:	da 01       	movw	r26, r20
     334:	c9 01       	movw	r24, r18
     336:	40 97       	sbiw	r24, 0x10	; 16
     338:	a1 09       	sbc	r26, r1
     33a:	b1 09       	sbc	r27, r1
     33c:	b6 95       	lsr	r27
     33e:	a7 95       	ror	r26
     340:	97 95       	ror	r25
     342:	87 95       	ror	r24
     344:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     348:	e9 eb       	ldi	r30, 0xB9	; 185
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	8c 7f       	andi	r24, 0xFC	; 252
     350:	80 83       	st	Z, r24
     352:	85 ec       	ldi	r24, 0xC5	; 197
     354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     358:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     35c:	d0 93 76 01 	sts	0x0176, r29	; 0x800176 <ioetr_twim_rxcall+0x1>
     360:	c0 93 75 01 	sts	0x0175, r28	; 0x800175 <ioetr_twim_rxcall>
     364:	78 94       	sei
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <js_twim_tx>:
     36c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <ioetr_twim>
     370:	91 11       	cpse	r25, r1
     372:	22 c0       	rjmp	.+68     	; 0x3b8 <js_twim_tx+0x4c>
     374:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     378:	ee e7       	ldi	r30, 0x7E	; 126
     37a:	f1 e0       	ldi	r31, 0x01	; 1
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	90 83       	st	Z, r25
     380:	88 0f       	add	r24, r24
     382:	81 83       	std	Z+1, r24	; 0x01
     384:	41 32       	cpi	r20, 0x21	; 33
     386:	08 f0       	brcs	.+2      	; 0x38a <js_twim_tx+0x1e>
     388:	40 e2       	ldi	r20, 0x20	; 32
     38a:	44 23       	and	r20, r20
     38c:	71 f0       	breq	.+28     	; 0x3aa <js_twim_tx+0x3e>
     38e:	a6 2f       	mov	r26, r22
     390:	b7 2f       	mov	r27, r23
     392:	e4 e8       	ldi	r30, 0x84	; 132
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	24 0f       	add	r18, r20
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	2b 57       	subi	r18, 0x7B	; 123
     39e:	3e 4f       	sbci	r19, 0xFE	; 254
     3a0:	8d 91       	ld	r24, X+
     3a2:	81 93       	st	Z+, r24
     3a4:	e2 17       	cp	r30, r18
     3a6:	f3 07       	cpc	r31, r19
     3a8:	d9 f7       	brne	.-10     	; 0x3a0 <js_twim_tx+0x34>
     3aa:	40 93 81 01 	sts	0x0181, r20	; 0x800181 <ioetr_twim+0x3>
     3ae:	85 ee       	ldi	r24, 0xE5	; 229
     3b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	08 95       	ret
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	08 95       	ret

000003bc <js_twim_rx>:
     3bc:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <ioetr_twim>
     3c0:	91 11       	cpse	r25, r1
     3c2:	13 c0       	rjmp	.+38     	; 0x3ea <js_twim_rx+0x2e>
     3c4:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3c8:	ee e7       	ldi	r30, 0x7E	; 126
     3ca:	f1 e0       	ldi	r31, 0x01	; 1
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	90 83       	st	Z, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	81 83       	std	Z+1, r24	; 0x01
     3d6:	61 32       	cpi	r22, 0x21	; 33
     3d8:	08 f0       	brcs	.+2      	; 0x3dc <js_twim_rx+0x20>
     3da:	60 e2       	ldi	r22, 0x20	; 32
     3dc:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <ioetr_twim+0x5>
     3e0:	85 ee       	ldi	r24, 0xE5	; 229
     3e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	08 95       	ret
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	08 95       	ret

000003ee <__vector_24>:
     3ee:	1f 92       	push	r1
     3f0:	0f 92       	push	r0
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	0f 92       	push	r0
     3f6:	11 24       	eor	r1, r1
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     414:	e8 2f       	mov	r30, r24
     416:	e8 7f       	andi	r30, 0xF8	; 248
     418:	8e 2f       	mov	r24, r30
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	38 97       	sbiw	r30, 0x08	; 8
     420:	e1 35       	cpi	r30, 0x51	; 81
     422:	f1 05       	cpc	r31, r1
     424:	08 f0       	brcs	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     426:	6c c0       	rjmp	.+216    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     428:	ec 5c       	subi	r30, 0xCC	; 204
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__tablejump2__>
     430:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ioetr_twim+0x4>
     434:	61 11       	cpse	r22, r1
     436:	4b c0       	rjmp	.+150    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     438:	58 c0       	rjmp	.+176    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     43a:	ee e7       	ldi	r30, 0x7E	; 126
     43c:	f1 e0       	ldi	r31, 0x01	; 1
     43e:	81 81       	ldd	r24, Z+1	; 0x01
     440:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     444:	12 82       	std	Z+2, r1	; 0x02
     446:	14 82       	std	Z+4, r1	; 0x04
     448:	85 ec       	ldi	r24, 0xC5	; 197
     44a:	61 c0       	rjmp	.+194    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     44c:	ae e7       	ldi	r26, 0x7E	; 126
     44e:	b1 e0       	ldi	r27, 0x01	; 1
     450:	12 96       	adiw	r26, 0x02	; 2
     452:	ec 91       	ld	r30, X
     454:	12 97       	sbiw	r26, 0x02	; 2
     456:	13 96       	adiw	r26, 0x03	; 3
     458:	8c 91       	ld	r24, X
     45a:	e8 17       	cp	r30, r24
     45c:	60 f4       	brcc	.+24     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	8e 0f       	add	r24, r30
     462:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ioetr_twim+0x2>
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	e2 58       	subi	r30, 0x82	; 130
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	86 81       	ldd	r24, Z+6	; 0x06
     46e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     472:	85 ec       	ldi	r24, 0xC5	; 197
     474:	4c c0       	rjmp	.+152    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     476:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     47a:	85 ed       	ldi	r24, 0xD5	; 213
     47c:	48 c0       	rjmp	.+144    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     47e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     482:	85 ed       	ldi	r24, 0xD5	; 213
     484:	44 c0       	rjmp	.+136    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     486:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     48a:	85 ec       	ldi	r24, 0xC5	; 197
     48c:	40 c0       	rjmp	.+128    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     48e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ioetr_twim+0x5>
     492:	81 11       	cpse	r24, r1
     494:	39 c0       	rjmp	.+114    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
     496:	85 e8       	ldi	r24, 0x85	; 133
     498:	3a c0       	rjmp	.+116    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     49a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     49e:	85 ed       	ldi	r24, 0xD5	; 213
     4a0:	36 c0       	rjmp	.+108    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     4a2:	ae e7       	ldi	r26, 0x7E	; 126
     4a4:	b1 e0       	ldi	r27, 0x01	; 1
     4a6:	14 96       	adiw	r26, 0x04	; 4
     4a8:	ec 91       	ld	r30, X
     4aa:	14 97       	sbiw	r26, 0x04	; 4
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	8e 0f       	add	r24, r30
     4b0:	14 96       	adiw	r26, 0x04	; 4
     4b2:	8c 93       	st	X, r24
     4b4:	14 97       	sbiw	r26, 0x04	; 4
     4b6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	e2 58       	subi	r30, 0x82	; 130
     4be:	fe 4f       	sbci	r31, 0xFE	; 254
     4c0:	96 a3       	std	Z+38, r25	; 0x26
     4c2:	15 96       	adiw	r26, 0x05	; 5
     4c4:	9c 91       	ld	r25, X
     4c6:	89 17       	cp	r24, r25
     4c8:	08 f1       	brcs	.+66     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     4ca:	85 e8       	ldi	r24, 0x85	; 133
     4cc:	20 c0       	rjmp	.+64     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     4ce:	e4 ea       	ldi	r30, 0xA4	; 164
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	a3 e5       	ldi	r26, 0x53	; 83
     4d4:	b2 e0       	ldi	r27, 0x02	; 2
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	26 0f       	add	r18, r22
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	2b 55       	subi	r18, 0x5B	; 91
     4de:	3e 4f       	sbci	r19, 0xFE	; 254
     4e0:	81 91       	ld	r24, Z+
     4e2:	8d 93       	st	X+, r24
     4e4:	e2 17       	cp	r30, r18
     4e6:	f3 07       	cpc	r31, r19
     4e8:	d9 f7       	brne	.-10     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4ea:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <ioetr_twim_rxcall>
     4ee:	f0 91 76 01 	lds	r31, 0x0176	; 0x800176 <ioetr_twim_rxcall+0x1>
     4f2:	83 e5       	ldi	r24, 0x53	; 83
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	09 95       	icall
     4f8:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     4fc:	85 ed       	ldi	r24, 0xD5	; 213
     4fe:	07 c0       	rjmp	.+14     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     500:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
     504:	85 ed       	ldi	r24, 0xD5	; 213
     506:	03 c0       	rjmp	.+6      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     508:	85 ec       	ldi	r24, 0xC5	; 197
     50a:	01 c0       	rjmp	.+2      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     50c:	85 ec       	ldi	r24, 0xC5	; 197
     50e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     512:	ff 91       	pop	r31
     514:	ef 91       	pop	r30
     516:	bf 91       	pop	r27
     518:	af 91       	pop	r26
     51a:	9f 91       	pop	r25
     51c:	8f 91       	pop	r24
     51e:	7f 91       	pop	r23
     520:	6f 91       	pop	r22
     522:	5f 91       	pop	r21
     524:	4f 91       	pop	r20
     526:	3f 91       	pop	r19
     528:	2f 91       	pop	r18
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <adc_channel_init>:
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	39 f4       	brne	.+14     	; 0x546 <adc_channel_init+0x12>
     538:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     53c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     540:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     544:	08 95       	ret
     546:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     54a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     54e:	25 e8       	ldi	r18, 0x85	; 133
     550:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     554:	ed ec       	ldi	r30, 0xCD	; 205
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	2d ef       	ldi	r18, 0xFD	; 253
     55a:	31 e0       	ldi	r19, 0x01	; 1
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	80 ff       	sbrs	r24, 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <adc_channel_init+0x32>
     562:	42 83       	std	Z+2, r20	; 0x02
     564:	01 c0       	rjmp	.+2      	; 0x568 <adc_channel_init+0x34>
     566:	12 82       	std	Z+2, r1	; 0x02
     568:	96 95       	lsr	r25
     56a:	87 95       	ror	r24
     56c:	11 82       	std	Z+1, r1	; 0x01
     56e:	10 82       	st	Z, r1
     570:	33 96       	adiw	r30, 0x03	; 3
     572:	e2 17       	cp	r30, r18
     574:	f3 07       	cpc	r31, r19
     576:	99 f7       	brne	.-26     	; 0x55e <adc_channel_init+0x2a>
     578:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <adc_reading>
     57c:	08 95       	ret

0000057e <adc_read_run>:
     57e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <adc_reading>
     582:	88 23       	and	r24, r24
     584:	e9 f0       	breq	.+58     	; 0x5c0 <adc_read_run+0x42>
     586:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     58a:	84 ff       	sbrs	r24, 4
     58c:	47 c0       	rjmp	.+142    	; 0x61c <adc_read_run+0x9e>
     58e:	ea e7       	ldi	r30, 0x7A	; 122
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	80 61       	ori	r24, 0x10	; 16
     596:	80 83       	st	Z, r24
     598:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     59c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     5a0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <adc_reading_ch>
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	8e 0f       	add	r24, r30
     5ae:	9f 1f       	adc	r25, r31
     5b0:	fc 01       	movw	r30, r24
     5b2:	e3 53       	subi	r30, 0x33	; 51
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	31 83       	std	Z+1, r19	; 0x01
     5b8:	20 83       	st	Z, r18
     5ba:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <adc_reading>
     5be:	08 95       	ret
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <adc_reading>
     5c6:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <adc_reading_ch>
     5ca:	2f 5f       	subi	r18, 0xFF	; 255
     5cc:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <adc_reading_ch>
     5d0:	30 e1       	ldi	r19, 0x10	; 16
     5d2:	20 31       	cpi	r18, 0x10	; 16
     5d4:	08 f0       	brcs	.+2      	; 0x5d8 <adc_read_run+0x5a>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	82 2f       	mov	r24, r18
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	fc 01       	movw	r30, r24
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	8e 0f       	add	r24, r30
     5e4:	9f 1f       	adc	r25, r31
     5e6:	fc 01       	movw	r30, r24
     5e8:	e3 53       	subi	r30, 0x33	; 51
     5ea:	fe 4f       	sbci	r31, 0xFE	; 254
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	88 23       	and	r24, r24
     5f0:	19 f0       	breq	.+6      	; 0x5f8 <adc_read_run+0x7a>
     5f2:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <adc_reading_ch>
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <adc_read_run+0x80>
     5f8:	2f 5f       	subi	r18, 0xFF	; 255
     5fa:	31 50       	subi	r19, 0x01	; 1
     5fc:	51 f7       	brne	.-44     	; 0x5d2 <adc_read_run+0x54>
     5fe:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <adc_reading_ch>
     602:	88 30       	cpi	r24, 0x08	; 8
     604:	21 f4       	brne	.+8      	; 0x60e <adc_read_run+0x90>
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     60c:	02 c0       	rjmp	.+4      	; 0x612 <adc_read_run+0x94>
     60e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     612:	ea e7       	ldi	r30, 0x7A	; 122
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	80 64       	ori	r24, 0x40	; 64
     61a:	80 83       	st	Z, r24
     61c:	08 95       	ret

0000061e <servo_drive_init>:
     61e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <servo_drive_mode>
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	d9 f4       	brne	.+54     	; 0x65c <servo_drive_init+0x3e>
     626:	82 e3       	ldi	r24, 0x32	; 50
     628:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     62c:	8a e1       	ldi	r24, 0x1A	; 26
     62e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     632:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     636:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     63a:	93 eb       	ldi	r25, 0xB3	; 179
     63c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     646:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     64a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     64e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     652:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     656:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     65a:	08 95       	ret
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	d1 f4       	brne	.+52     	; 0x694 <servo_drive_init+0x76>
     660:	82 e3       	ldi	r24, 0x32	; 50
     662:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     666:	8b e1       	ldi	r24, 0x1B	; 27
     668:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     66c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     670:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     674:	96 e1       	ldi	r25, 0x16	; 22
     676:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     67a:	8f e7       	ldi	r24, 0x7F	; 127
     67c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     680:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     684:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     688:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     68c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     690:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     694:	08 95       	ret

00000696 <servo_drive_active>:
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	6a 01       	movw	r12, r20
     6a4:	7b 01       	movw	r14, r22
     6a6:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <servo_drive_mode>
     6aa:	92 30       	cpi	r25, 0x02	; 2
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <servo_drive_active+0x1a>
     6ae:	3f c0       	rjmp	.+126    	; 0x72e <servo_drive_active+0x98>
     6b0:	81 11       	cpse	r24, r1
     6b2:	13 c0       	rjmp	.+38     	; 0x6da <servo_drive_active+0x44>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	a8 e4       	ldi	r26, 0x48	; 72
     6ba:	b3 e4       	ldi	r27, 0x43	; 67
     6bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6c4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     6c8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     6cc:	83 eb       	ldi	r24, 0xB3	; 179
     6ce:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     6d8:	85 c0       	rjmp	.+266    	; 0x7e4 <servo_drive_active+0x14e>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	a9 01       	movw	r20, r18
     6e0:	c7 01       	movw	r24, r14
     6e2:	b6 01       	movw	r22, r12
     6e4:	0e 94 ad 09 	call	0x135a	; 0x135a <__cmpsf2>
     6e8:	88 23       	and	r24, r24
     6ea:	0c f4       	brge	.+2      	; 0x6ee <servo_drive_active+0x58>
     6ec:	7b c0       	rjmp	.+246    	; 0x7e4 <servo_drive_active+0x14e>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	44 e3       	ldi	r20, 0x34	; 52
     6f4:	53 e4       	ldi	r21, 0x43	; 67
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 93 0a 	call	0x1526	; 0x1526 <__gesf2>
     6fe:	18 16       	cp	r1, r24
     700:	0c f4       	brge	.+2      	; 0x704 <servo_drive_active+0x6e>
     702:	70 c0       	rjmp	.+224    	; 0x7e4 <servo_drive_active+0x14e>
     704:	2d ec       	ldi	r18, 0xCD	; 205
     706:	3c ec       	ldi	r19, 0xCC	; 204
     708:	4c ec       	ldi	r20, 0xCC	; 204
     70a:	51 e4       	ldi	r21, 0x41	; 65
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 98 0a 	call	0x1530	; 0x1530 <__mulsf3>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e9       	ldi	r20, 0x90	; 144
     71a:	54 e4       	ldi	r21, 0x44	; 68
     71c:	0e 94 41 09 	call	0x1282	; 0x1282 <__addsf3>
     720:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fixunssfsi>
     724:	cf ef       	ldi	r28, 0xFF	; 255
     726:	d3 eb       	ldi	r29, 0xB3	; 179
     728:	c6 1b       	sub	r28, r22
     72a:	d7 0b       	sbc	r29, r23
     72c:	41 c0       	rjmp	.+130    	; 0x7b0 <servo_drive_active+0x11a>
     72e:	91 30       	cpi	r25, 0x01	; 1
     730:	e9 f5       	brne	.+122    	; 0x7ac <servo_drive_active+0x116>
     732:	81 11       	cpse	r24, r1
     734:	13 c0       	rjmp	.+38     	; 0x75c <servo_drive_active+0xc6>
     736:	86 e1       	ldi	r24, 0x16	; 22
     738:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     73c:	8f e7       	ldi	r24, 0x7F	; 127
     73e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a8 e4       	ldi	r26, 0x48	; 72
     748:	b3 e4       	ldi	r27, 0x43	; 67
     74a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     74e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     752:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     756:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     75a:	44 c0       	rjmp	.+136    	; 0x7e4 <servo_drive_active+0x14e>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	a9 01       	movw	r20, r18
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	0e 94 ad 09 	call	0x135a	; 0x135a <__cmpsf2>
     76a:	88 23       	and	r24, r24
     76c:	dc f1       	brlt	.+118    	; 0x7e4 <servo_drive_active+0x14e>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	44 e3       	ldi	r20, 0x34	; 52
     774:	53 e4       	ldi	r21, 0x43	; 67
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 93 0a 	call	0x1526	; 0x1526 <__gesf2>
     77e:	18 16       	cp	r1, r24
     780:	8c f1       	brlt	.+98     	; 0x7e4 <servo_drive_active+0x14e>
     782:	2d ec       	ldi	r18, 0xCD	; 205
     784:	3c ec       	ldi	r19, 0xCC	; 204
     786:	4c e4       	ldi	r20, 0x4C	; 76
     788:	50 e4       	ldi	r21, 0x40	; 64
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	0e 94 98 0a 	call	0x1530	; 0x1530 <__mulsf3>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e1       	ldi	r20, 0x10	; 16
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	0e 94 41 09 	call	0x1282	; 0x1282 <__addsf3>
     79e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fixunssfsi>
     7a2:	cf e7       	ldi	r28, 0x7F	; 127
     7a4:	d6 e1       	ldi	r29, 0x16	; 22
     7a6:	c6 1b       	sub	r28, r22
     7a8:	d7 0b       	sbc	r29, r23
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <servo_drive_active+0x11a>
     7ac:	c0 e0       	ldi	r28, 0x00	; 0
     7ae:	d0 e0       	ldi	r29, 0x00	; 0
     7b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7b8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     7bc:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     7c0:	c7 01       	movw	r24, r14
     7c2:	b6 01       	movw	r22, r12
     7c4:	0e 94 ad 09 	call	0x135a	; 0x135a <__cmpsf2>
     7c8:	88 23       	and	r24, r24
     7ca:	61 f0       	breq	.+24     	; 0x7e4 <servo_drive_active+0x14e>
     7cc:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d0:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7d4:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     7d8:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     7dc:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     7e0:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	08 95       	ret

000007f2 <custom_control>:
     7f2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <timer_1ms_1>
     7f6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <timer_1ms_1+0x1>
     7fa:	88 3e       	cpi	r24, 0xE8	; 232
     7fc:	93 40       	sbci	r25, 0x03	; 3
     7fe:	20 f0       	brcs	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     800:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <timer_1ms_1+0x1>
     804:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <timer_1ms_1>
     808:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_1ms_2>
     80c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_1ms_2+0x1>
     810:	84 3f       	cpi	r24, 0xF4	; 244
     812:	91 40       	sbci	r25, 0x01	; 1
     814:	20 f0       	brcs	.+8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     816:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <timer_1ms_2+0x1>
     81a:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <timer_1ms_2>
     81e:	ed ec       	ldi	r30, 0xCD	; 205
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	86 81       	ldd	r24, Z+6	; 0x06
     824:	97 81       	ldd	r25, Z+7	; 0x07
     826:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <report_data_a+0x1>
     82a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <report_data_a>
     82e:	81 85       	ldd	r24, Z+9	; 0x09
     830:	92 85       	ldd	r25, Z+10	; 0x0a
     832:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <report_data_b+0x1>
     836:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <report_data_b>
     83a:	08 95       	ret

0000083c <custom_port_init>:
     83c:	9e ef       	ldi	r25, 0xFE	; 254
     83e:	98 0f       	add	r25, r24
     840:	92 30       	cpi	r25, 0x02	; 2
     842:	28 f5       	brcc	.+74     	; 0x88e <custom_port_init+0x52>
     844:	66 23       	and	r22, r22
     846:	91 f0       	breq	.+36     	; 0x86c <custom_port_init+0x30>
     848:	48 b1       	in	r20, 0x08	; 8
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	b9 01       	movw	r22, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <custom_port_init+0x1a>
     852:	66 0f       	add	r22, r22
     854:	77 1f       	adc	r23, r23
     856:	8a 95       	dec	r24
     858:	e2 f7       	brpl	.-8      	; 0x852 <custom_port_init+0x16>
     85a:	cb 01       	movw	r24, r22
     85c:	96 2f       	mov	r25, r22
     85e:	90 95       	com	r25
     860:	94 23       	and	r25, r20
     862:	98 b9       	out	0x08, r25	; 8
     864:	97 b1       	in	r25, 0x07	; 7
     866:	89 2b       	or	r24, r25
     868:	87 b9       	out	0x07, r24	; 7
     86a:	08 95       	ret
     86c:	47 b1       	in	r20, 0x07	; 7
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	b9 01       	movw	r22, r18
     874:	02 c0       	rjmp	.+4      	; 0x87a <custom_port_init+0x3e>
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	8a 95       	dec	r24
     87c:	e2 f7       	brpl	.-8      	; 0x876 <custom_port_init+0x3a>
     87e:	cb 01       	movw	r24, r22
     880:	96 2f       	mov	r25, r22
     882:	90 95       	com	r25
     884:	94 23       	and	r25, r20
     886:	97 b9       	out	0x07, r25	; 7
     888:	98 b1       	in	r25, 0x08	; 8
     88a:	89 2b       	or	r24, r25
     88c:	88 b9       	out	0x08, r24	; 8
     88e:	08 95       	ret

00000890 <car_control_stop>:
	uart_init(serial_rx, 38400, '\r');
	car_control_stop();
	out_uart_char((unsigned char *)"SYSTEM BOOT\r", 12);
}
void car_control_stop(void){
	from_ctrl_pc.set_drv_mode = 0;
     890:	e4 ec       	ldi	r30, 0xC4	; 196
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	10 82       	st	Z, r1
	from_ctrl_pc.set_drv_throttle = 0;
     896:	11 82       	std	Z+1, r1	; 0x01
	from_ctrl_pc.set_lamp = 0;
     898:	12 82       	std	Z+2, r1	; 0x02
	from_ctrl_pc.set_signal = 0;
     89a:	13 82       	std	Z+3, r1	; 0x03
	from_ctrl_pc.set_aimode = 0;
     89c:	14 82       	std	Z+4, r1	; 0x04
	from_ctrl_pc.set_horn = 0;
     89e:	15 82       	std	Z+5, r1	; 0x05
	from_ctrl_pc.set_steer_degree = 250; //200 upper OFF
     8a0:	8a ef       	ldi	r24, 0xFA	; 250
     8a2:	86 83       	std	Z+6, r24	; 0x06
	from_ctrl_pc.set_steer = 1500; //1500 upper OFF
     8a4:	8c ed       	ldi	r24, 0xDC	; 220
     8a6:	95 e0       	ldi	r25, 0x05	; 5
     8a8:	90 87       	std	Z+8, r25	; 0x08
     8aa:	87 83       	std	Z+7, r24	; 0x07
     8ac:	08 95       	ret

000008ae <system_init>:
	if(serial_available){
		serial_processing(serial_available);
	}
}
void system_init(void){
	TTLOUT_STEER_PWR(1);
     8ae:	41 9a       	sbi	0x08, 1	; 8
	TTLOUT_PC_PWR(1);
     8b0:	40 9a       	sbi	0x08, 0	; 8
	// Clock source: System Clock
	// Clock value: 18.000 kHz (17+1) 1kHz Loop: 1ms
	// Mode: CTC top=OCR0A
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=0x02; TCCR0B=0x05;
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	84 bd       	out	0x24, r24	; 36
     8b6:	95 e0       	ldi	r25, 0x05	; 5
     8b8:	95 bd       	out	0x25, r25	; 37
	TCNT0=0x00; OCR0A=17; OCR0B=0x00;
     8ba:	16 bc       	out	0x26, r1	; 38
     8bc:	91 e1       	ldi	r25, 0x11	; 17
     8be:	97 bd       	out	0x27, r25	; 39
     8c0:	18 bc       	out	0x28, r1	; 40
	
	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=0x02;
     8c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	adc_channel_init(0b0000000000001100);
     8c6:	8c e0       	ldi	r24, 0x0C	; 12
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 9a 02 	call	0x534	; 0x534 <adc_channel_init>
	servo_drive_delays = 500;
     8ce:	84 ef       	ldi	r24, 0xF4	; 244
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <servo_drive_delays+0x1>
     8d6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <servo_drive_delays>
	servo_drive_init(1);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 0f 03 	call	0x61e	; 0x61e <servo_drive_init>
	js_twi_master_init(i2c_received, 100000);
     8e0:	40 ea       	ldi	r20, 0xA0	; 160
     8e2:	56 e8       	ldi	r21, 0x86	; 134
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	8f ea       	ldi	r24, 0xAF	; 175
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 82 01 	call	0x304	; 0x304 <js_twi_master_init>
	uart_init(serial_rx, 38400, '\r');
     8f0:	2d e0       	ldi	r18, 0x0D	; 13
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	56 e9       	ldi	r21, 0x96	; 150
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	82 eb       	ldi	r24, 0xB2	; 178
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_init>
	car_control_stop();
     902:	0e 94 48 04 	call	0x890	; 0x890 <car_control_stop>
	out_uart_char((unsigned char *)"SYSTEM BOOT\r", 12);
     906:	6c e0       	ldi	r22, 0x0C	; 12
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <out_uart_char>
     910:	08 95       	ret

00000912 <i2c_transmit>:
	from_ctrl_pc.set_horn = 0;
	from_ctrl_pc.set_steer_degree = 250; //200 upper OFF
	from_ctrl_pc.set_steer = 1500; //1500 upper OFF
}

void i2c_transmit(unsigned char ai_mode, unsigned char drv_mode, unsigned char drv_throttle, unsigned char lamp_act, unsigned char signal_lamp, unsigned char horn_act){
     912:	ef 92       	push	r14
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	28 97       	sbiw	r28, 0x08	; 8
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	90 2f       	mov	r25, r16
	//반환요청값(8), 자동화모드(2), 방향등(2), 부저(2), 전후드라이빙(2), 전조등(1), 스로틀레벨(7) [00000000 11122344 56666666]
	char out_buffer[8], chkdata;
	
	out_buffer[0] = 192 + i2c_ret_cmd++;
     92e:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <i2c_ret_cmd>
     932:	51 e0       	ldi	r21, 0x01	; 1
     934:	53 0f       	add	r21, r19
     936:	50 93 71 01 	sts	0x0171, r21	; 0x800171 <i2c_ret_cmd>
     93a:	30 54       	subi	r19, 0x40	; 64
     93c:	39 83       	std	Y+1, r19	; 0x01
	if(i2c_ret_cmd >= 3) i2c_ret_cmd = 0;
     93e:	53 30       	cpi	r21, 0x03	; 3
     940:	10 f0       	brcs	.+4      	; 0x946 <i2c_transmit+0x34>
     942:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <i2c_ret_cmd>
	
	out_buffer[1] = (ai_mode&0b00000011)<<6;
	out_buffer[1] |= (signal_lamp&0b00000011)<<4;
	out_buffer[1] |= (horn_act&0b00000011)<<2;
	out_buffer[1] |= (drv_mode&0b00000011);
     946:	ee 2d       	mov	r30, r14
     948:	e3 70       	andi	r30, 0x03	; 3
     94a:	ee 0f       	add	r30, r30
     94c:	ee 0f       	add	r30, r30
     94e:	63 70       	andi	r22, 0x03	; 3
     950:	0e 2f       	mov	r16, r30
     952:	06 2b       	or	r16, r22
     954:	50 e4       	ldi	r21, 0x40	; 64
     956:	85 9f       	mul	r24, r21
     958:	f0 01       	movw	r30, r0
     95a:	11 24       	eor	r1, r1
     95c:	e0 2b       	or	r30, r16
     95e:	93 70       	andi	r25, 0x03	; 3
     960:	80 e1       	ldi	r24, 0x10	; 16
     962:	98 9f       	mul	r25, r24
     964:	80 01       	movw	r16, r0
     966:	11 24       	eor	r1, r1
     968:	0e 2b       	or	r16, r30
     96a:	0a 83       	std	Y+2, r16	; 0x02
	
	out_buffer[2] = (lamp_act&1)<<7;
	out_buffer[2] |= (drv_throttle&127);
     96c:	20 fb       	bst	r18, 0
     96e:	47 f9       	bld	r20, 7
     970:	4b 83       	std	Y+3, r20	; 0x03
	
	chkdata = out_buffer[0];
	chkdata ^= out_buffer[1];
	chkdata ^= out_buffer[2];
	out_buffer[3] = chkdata;
     972:	43 27       	eor	r20, r19
     974:	04 27       	eor	r16, r20
     976:	0c 83       	std	Y+4, r16	; 0x04
	
	js_twim_tx(0x59, out_buffer, 4);
     978:	44 e0       	ldi	r20, 0x04	; 4
     97a:	be 01       	movw	r22, r28
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	89 e5       	ldi	r24, 0x59	; 89
     982:	0e 94 b6 01 	call	0x36c	; 0x36c <js_twim_tx>
}
     986:	28 96       	adiw	r28, 0x08	; 8
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ef 90       	pop	r14
     99c:	08 95       	ret

0000099e <i2c_processing>:
void i2c_received(char *rx_data, unsigned char rx_len){
	i2c_available = rx_len;
}
void i2c_processing(void){
	unsigned char i, chkdata=js_twim_rxbuf[0];
     99e:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <js_twim_rxbuf>
	unsigned int int_temp = 0;
	
	for(i=1; i<i2c_available-1; i++){
     9a2:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <i2c_available>
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	41 50       	subi	r20, 0x01	; 1
     9aa:	51 09       	sbc	r21, r1
     9ac:	42 30       	cpi	r20, 0x02	; 2
     9ae:	51 05       	cpc	r21, r1
     9b0:	84 f0       	brlt	.+32     	; 0x9d2 <i2c_processing+0x34>
     9b2:	36 2f       	mov	r19, r22
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	21 e0       	ldi	r18, 0x01	; 1
		chkdata ^= js_twim_rxbuf[i];
     9ba:	fc 01       	movw	r30, r24
     9bc:	ed 5a       	subi	r30, 0xAD	; 173
     9be:	fd 4f       	sbci	r31, 0xFD	; 253
     9c0:	80 81       	ld	r24, Z
     9c2:	38 27       	eor	r19, r24
}
void i2c_processing(void){
	unsigned char i, chkdata=js_twim_rxbuf[0];
	unsigned int int_temp = 0;
	
	for(i=1; i<i2c_available-1; i++){
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	82 2f       	mov	r24, r18
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	84 17       	cp	r24, r20
     9cc:	95 07       	cpc	r25, r21
     9ce:	ac f3       	brlt	.-22     	; 0x9ba <i2c_processing+0x1c>
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <i2c_processing+0x3a>
}
void i2c_received(char *rx_data, unsigned char rx_len){
	i2c_available = rx_len;
}
void i2c_processing(void){
	unsigned char i, chkdata=js_twim_rxbuf[0];
     9d2:	36 2f       	mov	r19, r22
	unsigned int int_temp = 0;
	
	for(i=1; i<i2c_available-1; i++){
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
		chkdata ^= js_twim_rxbuf[i];
	}
	if(chkdata != js_twim_rxbuf[i]){
     9d8:	fc 01       	movw	r30, r24
     9da:	ed 5a       	subi	r30, 0xAD	; 173
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	80 81       	ld	r24, Z
     9e0:	83 17       	cp	r24, r19
     9e2:	19 f0       	breq	.+6      	; 0x9ea <i2c_processing+0x4c>
		i2c_available = 0;
     9e4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <i2c_available>
		return;
     9e8:	08 95       	ret
	}
	i2c_tx_respone = 0;
     9ea:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <i2c_tx_respone>
	i2c_timeout = 100;
     9ee:	84 e6       	ldi	r24, 0x64	; 100
     9f0:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <i2c_timeout>
	
	switch(js_twim_rxbuf[0]){
     9f4:	61 3c       	cpi	r22, 0xC1	; 193
     9f6:	09 f4       	brne	.+2      	; 0x9fa <i2c_processing+0x5c>
     9f8:	53 c0       	rjmp	.+166    	; 0xaa0 <i2c_processing+0x102>
     9fa:	62 3c       	cpi	r22, 0xC2	; 194
     9fc:	09 f4       	brne	.+2      	; 0xa00 <i2c_processing+0x62>
     9fe:	8d c0       	rjmp	.+282    	; 0xb1a <i2c_processing+0x17c>
     a00:	60 3c       	cpi	r22, 0xC0	; 192
     a02:	09 f0       	breq	.+2      	; 0xa06 <i2c_processing+0x68>
     a04:	c7 c0       	rjmp	.+398    	; 0xb94 <i2c_processing+0x1f6>
		case 192:
		//자동화 허용상태 [2bit], 드라이빙 상태 [2bit], 전자브레이크 동작 상태 [2bit], 방향등 상태 [2bit]
		//배터리 전류 [8bit]
		//현재 스티어 레벨 [10bit], 배터리 전압 [12bit], 배터리 충방상태 [1bit], 전조등 상태 [1bit]
		from_gilbot.get_aimode = (js_twim_rxbuf[1]&0b11000000)>>6;
     a06:	a3 e5       	ldi	r26, 0x53	; 83
     a08:	b2 e0       	ldi	r27, 0x02	; 2
     a0a:	11 96       	adiw	r26, 0x01	; 1
     a0c:	8c 91       	ld	r24, X
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	ed e3       	ldi	r30, 0x3D	; 61
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	98 2f       	mov	r25, r24
     a16:	92 95       	swap	r25
     a18:	96 95       	lsr	r25
     a1a:	96 95       	lsr	r25
     a1c:	93 70       	andi	r25, 0x03	; 3
     a1e:	94 8b       	std	Z+20, r25	; 0x14
		from_gilbot.get_drv_mode = (js_twim_rxbuf[1]&0b00110000)>>4;
     a20:	28 2f       	mov	r18, r24
     a22:	20 73       	andi	r18, 0x30	; 48
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	35 95       	asr	r19
     a28:	27 95       	ror	r18
     a2a:	35 95       	asr	r19
     a2c:	27 95       	ror	r18
     a2e:	35 95       	asr	r19
     a30:	27 95       	ror	r18
     a32:	35 95       	asr	r19
     a34:	27 95       	ror	r18
     a36:	25 8b       	std	Z+21, r18	; 0x15
		from_gilbot.get_emb = (js_twim_rxbuf[1]&0b00001100)>>2;
     a38:	28 2f       	mov	r18, r24
     a3a:	2c 70       	andi	r18, 0x0C	; 12
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	35 95       	asr	r19
     a40:	27 95       	ror	r18
     a42:	35 95       	asr	r19
     a44:	27 95       	ror	r18
     a46:	23 8b       	std	Z+19, r18	; 0x13
		from_gilbot.get_signal = (js_twim_rxbuf[1]&0b00000011);
     a48:	83 70       	andi	r24, 0x03	; 3
     a4a:	82 8b       	std	Z+18, r24	; 0x12
		from_gilbot.get_current = js_twim_rxbuf[2];
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	8c 91       	ld	r24, X
     a50:	12 97       	sbiw	r26, 0x02	; 2
     a52:	87 87       	std	Z+15, r24	; 0x0f
		int_temp = js_twim_rxbuf[3];
     a54:	13 96       	adiw	r26, 0x03	; 3
     a56:	2c 91       	ld	r18, X
     a58:	13 97       	sbiw	r26, 0x03	; 3
     a5a:	30 e0       	ldi	r19, 0x00	; 0
		int_temp <<= 2;
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
		int_temp |= (js_twim_rxbuf[4]&0b11000000)>>6;
     a64:	14 96       	adiw	r26, 0x04	; 4
     a66:	8c 91       	ld	r24, X
     a68:	14 97       	sbiw	r26, 0x04	; 4
		from_gilbot.get_steer = int_temp;
     a6a:	98 2f       	mov	r25, r24
     a6c:	92 95       	swap	r25
     a6e:	96 95       	lsr	r25
     a70:	96 95       	lsr	r25
     a72:	93 70       	andi	r25, 0x03	; 3
     a74:	29 2b       	or	r18, r25
     a76:	31 83       	std	Z+1, r19	; 0x01
     a78:	20 83       	st	Z, r18
		int_temp = (js_twim_rxbuf[4]&0b00111111);
     a7a:	8f 73       	andi	r24, 0x3F	; 63
		int_temp <<= 6;
     a7c:	20 e4       	ldi	r18, 0x40	; 64
     a7e:	82 9f       	mul	r24, r18
     a80:	c0 01       	movw	r24, r0
     a82:	11 24       	eor	r1, r1
		int_temp |= (js_twim_rxbuf[5]&0b11111100);
     a84:	15 96       	adiw	r26, 0x05	; 5
     a86:	2c 91       	ld	r18, X
		from_gilbot.get_voltage = int_temp;
     a88:	32 2f       	mov	r19, r18
     a8a:	3c 7f       	andi	r19, 0xFC	; 252
     a8c:	83 2b       	or	r24, r19
     a8e:	91 87       	std	Z+9, r25	; 0x09
     a90:	80 87       	std	Z+8, r24	; 0x08
		from_gilbot.get_current_vector = (js_twim_rxbuf[5]&0b00000010)>>1;
     a92:	21 fb       	bst	r18, 1
     a94:	88 27       	eor	r24, r24
     a96:	80 f9       	bld	r24, 0
     a98:	86 87       	std	Z+14, r24	; 0x0e
		from_gilbot.get_lamp = (js_twim_rxbuf[5]&0b00000001);
     a9a:	21 70       	andi	r18, 0x01	; 1
     a9c:	21 8b       	std	Z+17, r18	; 0x11
		break;
     a9e:	7a c0       	rjmp	.+244    	; 0xb94 <i2c_processing+0x1f6>
		
		case 193:
		//현재 스티어 레벨 [10bit], 스티어 좌측 제한 레벨 [10bit],
		//스티어 우측 제한 레벨 [10bit], 스티어 중간 레벨 [10bit]
		int_temp = js_twim_rxbuf[1];
     aa0:	a3 e5       	ldi	r26, 0x53	; 83
     aa2:	b2 e0       	ldi	r27, 0x02	; 2
     aa4:	11 96       	adiw	r26, 0x01	; 1
     aa6:	2c 91       	ld	r18, X
     aa8:	11 97       	sbiw	r26, 0x01	; 1
     aaa:	30 e0       	ldi	r19, 0x00	; 0
		int_temp <<= 2;
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
		int_temp |= (js_twim_rxbuf[2]&0b11000000)>>6;
     ab4:	12 96       	adiw	r26, 0x02	; 2
     ab6:	8c 91       	ld	r24, X
     ab8:	12 97       	sbiw	r26, 0x02	; 2
		from_gilbot.get_steer = int_temp;
     aba:	ed e3       	ldi	r30, 0x3D	; 61
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	98 2f       	mov	r25, r24
     ac0:	92 95       	swap	r25
     ac2:	96 95       	lsr	r25
     ac4:	96 95       	lsr	r25
     ac6:	93 70       	andi	r25, 0x03	; 3
     ac8:	29 2b       	or	r18, r25
     aca:	31 83       	std	Z+1, r19	; 0x01
     acc:	20 83       	st	Z, r18
		int_temp = (js_twim_rxbuf[2]&0b00111111);
     ace:	8f 73       	andi	r24, 0x3F	; 63
		int_temp <<= 4;
     ad0:	20 e1       	ldi	r18, 0x10	; 16
     ad2:	82 9f       	mul	r24, r18
     ad4:	c0 01       	movw	r24, r0
     ad6:	11 24       	eor	r1, r1
		int_temp |= (js_twim_rxbuf[3]&0b11110000)>>4;
     ad8:	13 96       	adiw	r26, 0x03	; 3
     ada:	2c 91       	ld	r18, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
		from_gilbot.get_steer_left = int_temp;
     ade:	32 2f       	mov	r19, r18
     ae0:	32 95       	swap	r19
     ae2:	3f 70       	andi	r19, 0x0F	; 15
     ae4:	83 2b       	or	r24, r19
     ae6:	93 83       	std	Z+3, r25	; 0x03
     ae8:	82 83       	std	Z+2, r24	; 0x02
		int_temp = (js_twim_rxbuf[3]&0b00001111);
     aea:	2f 70       	andi	r18, 0x0F	; 15
		int_temp <<= 6;
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	28 9f       	mul	r18, r24
     af0:	90 01       	movw	r18, r0
     af2:	11 24       	eor	r1, r1
		int_temp |= (js_twim_rxbuf[4]&0b11111100)>>2;
     af4:	14 96       	adiw	r26, 0x04	; 4
     af6:	8c 91       	ld	r24, X
     af8:	14 97       	sbiw	r26, 0x04	; 4
		from_gilbot.get_steer_right = int_temp;
     afa:	98 2f       	mov	r25, r24
     afc:	96 95       	lsr	r25
     afe:	96 95       	lsr	r25
     b00:	29 2b       	or	r18, r25
     b02:	35 83       	std	Z+5, r19	; 0x05
     b04:	24 83       	std	Z+4, r18	; 0x04
		int_temp = (js_twim_rxbuf[4]&0b00000011);
     b06:	83 70       	andi	r24, 0x03	; 3
     b08:	90 e0       	ldi	r25, 0x00	; 0
		int_temp <<= 8;
     b0a:	98 2f       	mov	r25, r24
     b0c:	88 27       	eor	r24, r24
		int_temp |= js_twim_rxbuf[5];
		from_gilbot.get_steer_center = int_temp;
     b0e:	15 96       	adiw	r26, 0x05	; 5
     b10:	2c 91       	ld	r18, X
     b12:	82 2b       	or	r24, r18
     b14:	97 83       	std	Z+7, r25	; 0x07
     b16:	86 83       	std	Z+6, r24	; 0x06
		break;
     b18:	3d c0       	rjmp	.+122    	; 0xb94 <i2c_processing+0x1f6>
		
		case 194:
		//현재 스티어 레벨[10bit], 좌 모터 홀 데이터 [12bit], 우 모터 홀 데이터 [12bit], 회생 브레이크 온도 [6bit]
		int_temp = js_twim_rxbuf[1];
     b1a:	a3 e5       	ldi	r26, 0x53	; 83
     b1c:	b2 e0       	ldi	r27, 0x02	; 2
     b1e:	11 96       	adiw	r26, 0x01	; 1
     b20:	8c 91       	ld	r24, X
     b22:	11 97       	sbiw	r26, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
		int_temp <<= 2;
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
		int_temp |= (js_twim_rxbuf[2]&0b11000000)>>6;
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	2c 91       	ld	r18, X
     b32:	12 97       	sbiw	r26, 0x02	; 2
		from_gilbot.get_steer = int_temp;
     b34:	ed e3       	ldi	r30, 0x3D	; 61
     b36:	f2 e0       	ldi	r31, 0x02	; 2
     b38:	32 2f       	mov	r19, r18
     b3a:	32 95       	swap	r19
     b3c:	36 95       	lsr	r19
     b3e:	36 95       	lsr	r19
     b40:	33 70       	andi	r19, 0x03	; 3
     b42:	83 2b       	or	r24, r19
     b44:	91 83       	std	Z+1, r25	; 0x01
     b46:	80 83       	st	Z, r24
		int_temp = (js_twim_rxbuf[2]&0b00111111);
     b48:	2f 73       	andi	r18, 0x3F	; 63
		int_temp <<= 6;
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	28 9f       	mul	r18, r24
     b4e:	90 01       	movw	r18, r0
     b50:	11 24       	eor	r1, r1
		int_temp |= (js_twim_rxbuf[3]&0b11111100)>>2;
     b52:	13 96       	adiw	r26, 0x03	; 3
     b54:	8c 91       	ld	r24, X
     b56:	13 97       	sbiw	r26, 0x03	; 3
		from_gilbot.get_hall_l = int_temp;
     b58:	98 2f       	mov	r25, r24
     b5a:	96 95       	lsr	r25
     b5c:	96 95       	lsr	r25
     b5e:	29 2b       	or	r18, r25
     b60:	33 87       	std	Z+11, r19	; 0x0b
     b62:	22 87       	std	Z+10, r18	; 0x0a
		int_temp = (js_twim_rxbuf[3]&0b00000011);
     b64:	83 70       	andi	r24, 0x03	; 3
     b66:	90 e0       	ldi	r25, 0x00	; 0
		int_temp <<= 8;
     b68:	98 2f       	mov	r25, r24
     b6a:	88 27       	eor	r24, r24
		int_temp |= js_twim_rxbuf[4];
     b6c:	14 96       	adiw	r26, 0x04	; 4
     b6e:	2c 91       	ld	r18, X
     b70:	14 97       	sbiw	r26, 0x04	; 4
     b72:	82 2b       	or	r24, r18
		int_temp <<= 2;
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
		int_temp |= (js_twim_rxbuf[5]&0b11000000)>>6;
     b7c:	15 96       	adiw	r26, 0x05	; 5
     b7e:	2c 91       	ld	r18, X
		from_gilbot.get_hall_r = int_temp;
     b80:	32 2f       	mov	r19, r18
     b82:	32 95       	swap	r19
     b84:	36 95       	lsr	r19
     b86:	36 95       	lsr	r19
     b88:	33 70       	andi	r19, 0x03	; 3
     b8a:	83 2b       	or	r24, r19
     b8c:	95 87       	std	Z+13, r25	; 0x0d
     b8e:	84 87       	std	Z+12, r24	; 0x0c
		from_gilbot.get_brk_temperature = js_twim_rxbuf[5]&0b00111111;
     b90:	2f 73       	andi	r18, 0x3F	; 63
     b92:	20 8b       	std	Z+16, r18	; 0x10
		break;
		
		default: break;
	}
	i2c_available = 0;
     b94:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <i2c_available>
     b98:	08 95       	ret

00000b9a <serial_processing>:
}

void serial_rx(unsigned char *rx_data, unsigned char len){
	serial_available = len;
}
void serial_processing(unsigned char len){
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	28 97       	sbiw	r28, 0x08	; 8
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
	unsigned char i, *rx_data = rx_frame, temp_char, ret_cmd, str_temp[8];
	unsigned char cal_checkdata = rx_frame[0], read_checkdata;
	unsigned int temp_int;
	
 	if(len < 17){
     bb2:	81 31       	cpi	r24, 0x11	; 17
     bb4:	58 f0       	brcs	.+22     	; 0xbcc <serial_processing+0x32>
void serial_rx(unsigned char *rx_data, unsigned char len){
	serial_available = len;
}
void serial_processing(unsigned char len){
	unsigned char i, *rx_data = rx_frame, temp_char, ret_cmd, str_temp[8];
	unsigned char cal_checkdata = rx_frame[0], read_checkdata;
     bb6:	10 91 73 02 	lds	r17, 0x0273	; 0x800273 <rx_frame>
	 }
	//[21 Byte] Rx: 드라이브모드(1), 스로틀레벨(2), 핸들각도조절(3), 핸들각도INT모드조절(4), 시그널동작(1), 램프동작(1), 부저동작(1), 사용자입력A(1), 사용자입력B(1), 반환요청(1), 제어모드(2), 체크데이터(3), [13]
	//[22 Byte] Tx: 차량통신상태(1),핸들각도(3), 핸들각도INT모드(4), 차량 좌우 합산 홀수(4), 반환명(1), 반환데이터(4), 체크데이터(3), [13]
	
	//체크 데이터 및 수신 체크 데이터 계산
	for(i=1; i<len-3; i++){
     bba:	a8 2f       	mov	r26, r24
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	13 97       	sbiw	r26, 0x03	; 3
     bc0:	a2 30       	cpi	r26, 0x02	; 2
     bc2:	b1 05       	cpc	r27, r1
     bc4:	e4 f4       	brge	.+56     	; 0xbfe <serial_processing+0x64>
     bc6:	91 2f       	mov	r25, r17
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <serial_processing+0x80>
	unsigned char i, *rx_data = rx_frame, temp_char, ret_cmd, str_temp[8];
	unsigned char cal_checkdata = rx_frame[0], read_checkdata;
	unsigned int temp_int;
	
 	if(len < 17){
		 sprintf((char *)out_buffer, "DataLenERR\r");
     bcc:	8c e0       	ldi	r24, 0x0C	; 12
     bce:	e2 e1       	ldi	r30, 0x12	; 18
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	ad ef       	ldi	r26, 0xFD	; 253
     bd4:	b1 e0       	ldi	r27, 0x01	; 1
     bd6:	01 90       	ld	r0, Z+
     bd8:	0d 92       	st	X+, r0
     bda:	8a 95       	dec	r24
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <serial_processing+0x3c>
		 out_uart_char((unsigned char *)out_buffer, strlen((char *)out_buffer));
     bde:	ed ef       	ldi	r30, 0xFD	; 253
     be0:	f1 e0       	ldi	r31, 0x01	; 1
     be2:	01 90       	ld	r0, Z+
     be4:	00 20       	and	r0, r0
     be6:	e9 f7       	brne	.-6      	; 0xbe2 <serial_processing+0x48>
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	bf 01       	movw	r22, r30
     bec:	6d 5f       	subi	r22, 0xFD	; 253
     bee:	71 40       	sbci	r23, 0x01	; 1
     bf0:	8d ef       	ldi	r24, 0xFD	; 253
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <out_uart_char>
		 serial_available = 0;
     bf8:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <serial_available>
		 return; //본 함수에서 수신시 [13]데이터 제외됨
     bfc:	e4 c1       	rjmp	.+968    	; 0xfc6 <serial_processing+0x42c>
	 }
	//[21 Byte] Rx: 드라이브모드(1), 스로틀레벨(2), 핸들각도조절(3), 핸들각도INT모드조절(4), 시그널동작(1), 램프동작(1), 부저동작(1), 사용자입력A(1), 사용자입력B(1), 반환요청(1), 제어모드(2), 체크데이터(3), [13]
	//[22 Byte] Tx: 차량통신상태(1),핸들각도(3), 핸들각도INT모드(4), 차량 좌우 합산 홀수(4), 반환명(1), 반환데이터(4), 체크데이터(3), [13]
	
	//체크 데이터 및 수신 체크 데이터 계산
	for(i=1; i<len-3; i++){
     bfe:	91 2f       	mov	r25, r17
     c00:	21 e0       	ldi	r18, 0x01	; 1
		cal_checkdata ^= rx_data[i];
     c02:	e2 2f       	mov	r30, r18
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ed 58       	subi	r30, 0x8D	; 141
     c08:	fd 4f       	sbci	r31, 0xFD	; 253
     c0a:	30 81       	ld	r19, Z
     c0c:	93 27       	eor	r25, r19
	 }
	//[21 Byte] Rx: 드라이브모드(1), 스로틀레벨(2), 핸들각도조절(3), 핸들각도INT모드조절(4), 시그널동작(1), 램프동작(1), 부저동작(1), 사용자입력A(1), 사용자입력B(1), 반환요청(1), 제어모드(2), 체크데이터(3), [13]
	//[22 Byte] Tx: 차량통신상태(1),핸들각도(3), 핸들각도INT모드(4), 차량 좌우 합산 홀수(4), 반환명(1), 반환데이터(4), 체크데이터(3), [13]
	
	//체크 데이터 및 수신 체크 데이터 계산
	for(i=1; i<len-3; i++){
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	42 2f       	mov	r20, r18
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	4a 17       	cp	r20, r26
     c16:	5b 07       	cpc	r21, r27
     c18:	a4 f3       	brlt	.-24     	; 0xc02 <serial_processing+0x68>
		cal_checkdata ^= rx_data[i];
	}
	read_checkdata = (rx_data[i]-'0')*100;
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	ed 58       	subi	r30, 0x8D	; 141
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	50 81       	ld	r21, Z
     c24:	50 53       	subi	r21, 0x30	; 48
	read_checkdata += (rx_data[i+1]-'0')*10;
	read_checkdata += (rx_data[i+2]-'0');
     c26:	f9 01       	movw	r30, r18
     c28:	eb 58       	subi	r30, 0x8B	; 139
     c2a:	fd 4f       	sbci	r31, 0xFD	; 253
     c2c:	40 81       	ld	r20, Z
     c2e:	40 53       	subi	r20, 0x30	; 48
     c30:	e4 e6       	ldi	r30, 0x64	; 100
     c32:	5e 9f       	mul	r21, r30
     c34:	40 0d       	add	r20, r0
     c36:	11 24       	eor	r1, r1
	//체크 데이터 및 수신 체크 데이터 계산
	for(i=1; i<len-3; i++){
		cal_checkdata ^= rx_data[i];
	}
	read_checkdata = (rx_data[i]-'0')*100;
	read_checkdata += (rx_data[i+1]-'0')*10;
     c38:	f9 01       	movw	r30, r18
     c3a:	ec 58       	subi	r30, 0x8C	; 140
     c3c:	fd 4f       	sbci	r31, 0xFD	; 253
	read_checkdata += (rx_data[i+2]-'0');
     c3e:	20 81       	ld	r18, Z
     c40:	22 0f       	add	r18, r18
     c42:	20 56       	subi	r18, 0x60	; 96
     c44:	32 2f       	mov	r19, r18
     c46:	33 0f       	add	r19, r19
     c48:	33 0f       	add	r19, r19
     c4a:	23 0f       	add	r18, r19
     c4c:	24 0f       	add	r18, r20
	
	//체크 데이터 대조 확인
	if(cal_checkdata != read_checkdata){
     c4e:	29 17       	cp	r18, r25
     c50:	19 f1       	breq	.+70     	; 0xc98 <serial_processing+0xfe>
		sprintf((char *)out_buffer, "CKERR.[C:%d][R:%d][L:%d]\r", cal_checkdata, read_checkdata, len);
     c52:	1f 92       	push	r1
     c54:	8f 93       	push	r24
     c56:	1f 92       	push	r1
     c58:	2f 93       	push	r18
     c5a:	1f 92       	push	r1
     c5c:	9f 93       	push	r25
     c5e:	8e e1       	ldi	r24, 0x1E	; 30
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	0d ef       	ldi	r16, 0xFD	; 253
     c68:	11 e0       	ldi	r17, 0x01	; 1
     c6a:	1f 93       	push	r17
     c6c:	0f 93       	push	r16
     c6e:	0e 94 38 0b 	call	0x1670	; 0x1670 <sprintf>
		out_uart_char((unsigned char *)out_buffer, strlen((char *)out_buffer));
     c72:	f8 01       	movw	r30, r16
     c74:	01 90       	ld	r0, Z+
     c76:	00 20       	and	r0, r0
     c78:	e9 f7       	brne	.-6      	; 0xc74 <serial_processing+0xda>
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	bf 01       	movw	r22, r30
     c7e:	6d 5f       	subi	r22, 0xFD	; 253
     c80:	71 40       	sbci	r23, 0x01	; 1
     c82:	c8 01       	movw	r24, r16
     c84:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <out_uart_char>
		serial_available = 0;
     c88:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <serial_available>
		return;
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	97 c1       	rjmp	.+814    	; 0xfc6 <serial_processing+0x42c>
	}
	serial_rx_timeout = 100;
     c98:	84 e6       	ldi	r24, 0x64	; 100
     c9a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <serial_rx_timeout>
	//                                    -
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//F:전진, R:후진, N:중립, B:비상정지 [0]
	switch(rx_data[0]){
     c9e:	16 34       	cpi	r17, 0x46	; 70
     ca0:	29 f0       	breq	.+10     	; 0xcac <serial_processing+0x112>
     ca2:	12 35       	cpi	r17, 0x52	; 82
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <serial_processing+0x11a>
     ca6:	12 34       	cpi	r17, 0x42	; 66
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <serial_processing+0x12a>
     caa:	08 c0       	rjmp	.+16     	; 0xcbc <serial_processing+0x122>
		case 'F': from_ctrl_pc.set_drv_mode = 1; break;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <from_ctrl_pc>
     cb2:	0a c0       	rjmp	.+20     	; 0xcc8 <serial_processing+0x12e>
		case 'R': from_ctrl_pc.set_drv_mode = 2; break;
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <from_ctrl_pc>
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <serial_processing+0x12e>
		case 'B': from_ctrl_pc.set_drv_mode = 3; break;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <from_ctrl_pc>
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <serial_processing+0x12e>
		default: from_ctrl_pc.set_drv_mode = 0; break;
     cc4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <from_ctrl_pc>
	}
	//                                     --
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//00~99 스로틀 레벨 검출 [1, 2]
	temp_char = (rx_data[1] - '0') * 10;
     cc8:	e3 e7       	ldi	r30, 0x73	; 115
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	81 81       	ldd	r24, Z+1	; 0x01
     cce:	88 0f       	add	r24, r24
     cd0:	80 56       	subi	r24, 0x60	; 96
     cd2:	98 2f       	mov	r25, r24
     cd4:	99 0f       	add	r25, r25
     cd6:	99 0f       	add	r25, r25
     cd8:	89 0f       	add	r24, r25
	temp_char += (rx_data[2] - '0');
	from_ctrl_pc.set_drv_throttle = temp_char;
     cda:	a4 ec       	ldi	r26, 0xC4	; 196
     cdc:	b1 e0       	ldi	r27, 0x01	; 1
     cde:	92 81       	ldd	r25, Z+2	; 0x02
     ce0:	90 53       	subi	r25, 0x30	; 48
     ce2:	89 0f       	add	r24, r25
     ce4:	11 96       	adiw	r26, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	11 97       	sbiw	r26, 0x01	; 1
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	90 53       	subi	r25, 0x30	; 48
     cee:	14 e6       	ldi	r17, 0x64	; 100
     cf0:	85 81       	ldd	r24, Z+5	; 0x05
     cf2:	80 53       	subi	r24, 0x30	; 48
     cf4:	91 9f       	mul	r25, r17
     cf6:	80 0d       	add	r24, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	98 2f       	mov	r25, r24
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//000~999 스티어 각도 모드 검출 [3, 4, 5]
	temp_char = (rx_data[3] - '0') * 100;
	temp_char += (rx_data[4] - '0') * 10;
	temp_char += (rx_data[5] - '0');
	from_ctrl_pc.set_steer_degree = temp_char;
     cfc:	84 81       	ldd	r24, Z+4	; 0x04
     cfe:	88 0f       	add	r24, r24
     d00:	80 56       	subi	r24, 0x60	; 96
     d02:	28 2f       	mov	r18, r24
     d04:	22 0f       	add	r18, r18
     d06:	22 0f       	add	r18, r18
     d08:	82 0f       	add	r24, r18
     d0a:	89 0f       	add	r24, r25
     d0c:	16 96       	adiw	r26, 0x06	; 6
     d0e:	8c 93       	st	X, r24
     d10:	16 97       	sbiw	r26, 0x06	; 6
     d12:	26 81       	ldd	r18, Z+6	; 0x06
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	20 53       	subi	r18, 0x30	; 48
     d18:	31 09       	sbc	r19, r1
     d1a:	88 ee       	ldi	r24, 0xE8	; 232
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	28 9f       	mul	r18, r24
     d20:	a0 01       	movw	r20, r0
     d22:	29 9f       	mul	r18, r25
     d24:	50 0d       	add	r21, r0
     d26:	38 9f       	mul	r19, r24
     d28:	50 0d       	add	r21, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	91 85       	ldd	r25, Z+9	; 0x09
     d2e:	89 2f       	mov	r24, r25
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	c0 97       	sbiw	r24, 0x30	; 48
     d34:	84 0f       	add	r24, r20
     d36:	95 1f       	adc	r25, r21
     d38:	47 81       	ldd	r20, Z+7	; 0x07
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	40 53       	subi	r20, 0x30	; 48
     d3e:	51 09       	sbc	r21, r1
     d40:	14 9f       	mul	r17, r20
     d42:	90 01       	movw	r18, r0
     d44:	15 9f       	mul	r17, r21
     d46:	30 0d       	add	r19, r0
     d48:	11 24       	eor	r1, r1
     d4a:	28 0f       	add	r18, r24
     d4c:	39 1f       	adc	r19, r25
	//0000~9999 스티어 레벨 모드 검출 [6, 7, 8, 9]
	temp_int = (rx_data[6] - '0') * 1000;
	temp_int += (rx_data[7] - '0') * 100;
	temp_int += (rx_data[8] - '0') * 10;
	temp_int += (rx_data[9] - '0');
	from_ctrl_pc.set_steer = temp_int;
     d4e:	90 85       	ldd	r25, Z+8	; 0x08
     d50:	89 2f       	mov	r24, r25
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	c0 97       	sbiw	r24, 0x30	; 48
     d56:	ac 01       	movw	r20, r24
     d58:	44 0f       	add	r20, r20
     d5a:	55 1f       	adc	r21, r21
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	84 0f       	add	r24, r20
     d6a:	95 1f       	adc	r25, r21
     d6c:	82 0f       	add	r24, r18
     d6e:	93 1f       	adc	r25, r19
     d70:	18 96       	adiw	r26, 0x08	; 8
     d72:	9c 93       	st	X, r25
     d74:	8e 93       	st	-X, r24
     d76:	17 97       	sbiw	r26, 0x07	; 7
	//                                              -
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//L:방향등좌, R:방향등우, E:방향등좌우, X:방향등끔 [10]
	switch(rx_data[10]){
     d78:	82 85       	ldd	r24, Z+10	; 0x0a
     d7a:	8c 34       	cpi	r24, 0x4C	; 76
     d7c:	29 f0       	breq	.+10     	; 0xd88 <serial_processing+0x1ee>
     d7e:	82 35       	cpi	r24, 0x52	; 82
     d80:	39 f0       	breq	.+14     	; 0xd90 <serial_processing+0x1f6>
     d82:	85 34       	cpi	r24, 0x45	; 69
     d84:	69 f4       	brne	.+26     	; 0xda0 <serial_processing+0x206>
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <serial_processing+0x1fe>
		case 'L': from_ctrl_pc.set_signal = 1; break;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <from_ctrl_pc+0x3>
     d8e:	0a c0       	rjmp	.+20     	; 0xda4 <serial_processing+0x20a>
		case 'R': from_ctrl_pc.set_signal = 2; break;
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <from_ctrl_pc+0x3>
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <serial_processing+0x20a>
		case 'E': from_ctrl_pc.set_signal = 3; break;
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <from_ctrl_pc+0x3>
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <serial_processing+0x20a>
		default: from_ctrl_pc.set_signal = 0; break;
     da0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <from_ctrl_pc+0x3>
	}
	//                                               -
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//O:라이트 켬, X:라이트 끔 [11]
	if(rx_data[11] == 'O') from_ctrl_pc.set_lamp = 1;
     da4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <rx_frame+0xb>
     da8:	8f 34       	cpi	r24, 0x4F	; 79
     daa:	21 f4       	brne	.+8      	; 0xdb4 <serial_processing+0x21a>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <from_ctrl_pc+0x2>
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <serial_processing+0x21e>
	else from_ctrl_pc.set_lamp = 0;
     db4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <from_ctrl_pc+0x2>
	//                                                -
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//O:부저 켬, X:부저 끔 [12]
	if(rx_data[12] == 'O') from_ctrl_pc.set_horn = 1;
     db8:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <rx_frame+0xc>
     dbc:	8f 34       	cpi	r24, 0x4F	; 79
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <serial_processing+0x22e>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <from_ctrl_pc+0x5>
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <serial_processing+0x232>
	else from_ctrl_pc.set_horn = 0;
     dc8:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <from_ctrl_pc+0x5>
	//                                                 -
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//H:PORTC2-HIGH, L:PORTC2-LOW [13]
	set_custom_a = rx_data[13] - '0';
     dcc:	e3 e7       	ldi	r30, 0x73	; 115
     dce:	f2 e0       	ldi	r31, 0x02	; 2
     dd0:	85 85       	ldd	r24, Z+13	; 0x0d
     dd2:	80 53       	subi	r24, 0x30	; 48
     dd4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <set_custom_a>
	//                                                  -
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//H:PORTC3-HIGH, L:PORTC3-LOW [14]
	set_custom_b = rx_data[14] - '0';
     dd8:	86 85       	ldd	r24, Z+14	; 0x0e
     dda:	80 53       	subi	r24, 0x30	; 48
     ddc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
	//                                                   ----
	//PythonSerial Rx Example: make_tx = "F000901500EXX00%02dN"%(test_loop)
	//반환요청 데이터 검출 [15, 16]
	ret_cmd = (rx_data[15] - '0') * 10;
     de0:	87 85       	ldd	r24, Z+15	; 0x0f
     de2:	88 0f       	add	r24, r24
     de4:	80 56       	subi	r24, 0x60	; 96
     de6:	98 2f       	mov	r25, r24
     de8:	99 0f       	add	r25, r25
     dea:	99 0f       	add	r25, r25
     dec:	89 0f       	add	r24, r25
	ret_cmd += (rx_data[16] - '0');
     dee:	90 89       	ldd	r25, Z+16	; 0x10
     df0:	90 53       	subi	r25, 0x30	; 48
     df2:	89 0f       	add	r24, r25
	
	//제어모드 검출 [17]
	if(rx_data[17] == 'F') from_ctrl_pc.set_aimode = 3; //Force
     df4:	91 89       	ldd	r25, Z+17	; 0x11
     df6:	96 34       	cpi	r25, 0x46	; 70
     df8:	21 f4       	brne	.+8      	; 0xe02 <serial_processing+0x268>
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <from_ctrl_pc+0x4>
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <serial_processing+0x284>
	else if(rx_data[17] == 'P') from_ctrl_pc.set_aimode = 2; //Pair
     e02:	90 35       	cpi	r25, 0x50	; 80
     e04:	21 f4       	brne	.+8      	; 0xe0e <serial_processing+0x274>
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <from_ctrl_pc+0x4>
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <serial_processing+0x284>
	else if(rx_data[17] == 'S') from_ctrl_pc.set_aimode = 1; //Steer
     e0e:	93 35       	cpi	r25, 0x53	; 83
     e10:	21 f4       	brne	.+8      	; 0xe1a <serial_processing+0x280>
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <from_ctrl_pc+0x4>
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <serial_processing+0x284>
	else from_ctrl_pc.set_aimode = 0; //OFF
     e1a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <from_ctrl_pc+0x4>
	
	//[20 Byte] Tx: 핸들각도(3), 핸들각도INT모드(4), 차량 좌우 합산 홀수(4), 반환명(1), 반환데이터(4), 체크데이터(3), [13]
	
	switch(ret_cmd){
     e1e:	08 2f       	mov	r16, r24
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	f8 01       	movw	r30, r16
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	eb 30       	cpi	r30, 0x0B	; 11
     e28:	f1 05       	cpc	r31, r1
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <serial_processing+0x294>
     e2c:	5c c0       	rjmp	.+184    	; 0xee6 <serial_processing+0x34c>
     e2e:	eb 57       	subi	r30, 0x7B	; 123
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__tablejump2__>
		case 1: temp_int = from_gilbot.get_steer_left; break; //핸들링 레벨 좌측 제한
     e36:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <from_gilbot+0x2>
     e3a:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <from_gilbot+0x3>
     e3e:	55 c0       	rjmp	.+170    	; 0xeea <serial_processing+0x350>
		case 2: temp_int = from_gilbot.get_steer_center; break; //핸들링 레벨 중간 값
     e40:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <from_gilbot+0x6>
     e44:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <from_gilbot+0x7>
     e48:	50 c0       	rjmp	.+160    	; 0xeea <serial_processing+0x350>
		case 3: temp_int = from_gilbot.get_steer_right; break; //핸들링 레벨 우측 제한
     e4a:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <from_gilbot+0x4>
     e4e:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <from_gilbot+0x5>
     e52:	4b c0       	rjmp	.+150    	; 0xeea <serial_processing+0x350>
		case 4: temp_int = from_gilbot.get_voltage; break; //현재전압
     e54:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <from_gilbot+0x8>
     e58:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <from_gilbot+0x9>
     e5c:	46 c0       	rjmp	.+140    	; 0xeea <serial_processing+0x350>
		case 5: temp_int = from_gilbot.get_hall_l; break; //뒤좌측홀데이터
     e5e:	60 91 47 02 	lds	r22, 0x0247	; 0x800247 <from_gilbot+0xa>
     e62:	70 91 48 02 	lds	r23, 0x0248	; 0x800248 <from_gilbot+0xb>
     e66:	41 c0       	rjmp	.+130    	; 0xeea <serial_processing+0x350>
		case 6: temp_int = from_gilbot.get_hall_r; break; //뒤우측홀데이터
     e68:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <from_gilbot+0xc>
     e6c:	70 91 4a 02 	lds	r23, 0x024A	; 0x80024a <from_gilbot+0xd>
     e70:	3c c0       	rjmp	.+120    	; 0xeea <serial_processing+0x350>
		case 7: temp_int = ((from_gilbot.get_current_vector&1)<<8)|from_gilbot.get_current; break; //전류레벨
     e72:	ed e3       	ldi	r30, 0x3D	; 61
     e74:	f2 e0       	ldi	r31, 0x02	; 2
     e76:	96 85       	ldd	r25, Z+14	; 0x0e
     e78:	91 70       	andi	r25, 0x01	; 1
     e7a:	79 2f       	mov	r23, r25
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	97 85       	ldd	r25, Z+15	; 0x0f
     e80:	69 2b       	or	r22, r25
     e82:	33 c0       	rjmp	.+102    	; 0xeea <serial_processing+0x350>
		case 8: temp_int = from_gilbot.get_brk_temperature; break; //브레이크 온도
     e84:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <from_gilbot+0x10>
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	2f c0       	rjmp	.+94     	; 0xeea <serial_processing+0x350>
		case 9: //드라이브모드, 램프, 시그널, 전자브레이크
		temp_int = from_gilbot.get_drv_mode*1000;
     e8c:	ed e3       	ldi	r30, 0x3D	; 61
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	95 89       	ldd	r25, Z+21	; 0x15
     e92:	48 ee       	ldi	r20, 0xE8	; 232
     e94:	53 e0       	ldi	r21, 0x03	; 3
     e96:	94 9f       	mul	r25, r20
     e98:	90 01       	movw	r18, r0
     e9a:	95 9f       	mul	r25, r21
     e9c:	30 0d       	add	r19, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	91 89       	ldd	r25, Z+17	; 0x11
     ea2:	44 e6       	ldi	r20, 0x64	; 100
     ea4:	94 9f       	mul	r25, r20
     ea6:	20 0d       	add	r18, r0
     ea8:	31 1d       	adc	r19, r1
     eaa:	11 24       	eor	r1, r1
     eac:	93 89       	ldd	r25, Z+19	; 0x13
     eae:	29 0f       	add	r18, r25
     eb0:	31 1d       	adc	r19, r1
		temp_int += from_gilbot.get_lamp*100;
		temp_int += from_gilbot.get_signal*10;
		temp_int += from_gilbot.get_emb;
     eb2:	42 89       	ldd	r20, Z+18	; 0x12
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	ba 01       	movw	r22, r20
     eb8:	66 0f       	add	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	44 0f       	add	r20, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	44 0f       	add	r20, r20
     ec2:	55 1f       	adc	r21, r21
     ec4:	44 0f       	add	r20, r20
     ec6:	55 1f       	adc	r21, r21
     ec8:	64 0f       	add	r22, r20
     eca:	75 1f       	adc	r23, r21
     ecc:	62 0f       	add	r22, r18
     ece:	73 1f       	adc	r23, r19
		break;
     ed0:	0c c0       	rjmp	.+24     	; 0xeea <serial_processing+0x350>
		case 10: temp_int = report_data_a; break;
     ed2:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <report_data_a>
     ed6:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <report_data_a+0x1>
     eda:	07 c0       	rjmp	.+14     	; 0xeea <serial_processing+0x350>
		case 11: temp_int = report_data_b; break;
     edc:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <report_data_b>
     ee0:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <report_data_b+0x1>
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <serial_processing+0x350>
		default: temp_int = 0; break;
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	sprintf((char *)out_buffer, "%c,%03d,%04d,%04d,%d,%04d,", i2c_timeout?'O':'X', 
		999, from_gilbot.get_steer, from_gilbot.get_hall_l+from_gilbot.get_hall_r, ret_cmd, temp_int);
     eea:	ed e3       	ldi	r30, 0x3D	; 61
     eec:	f2 e0       	ldi	r31, 0x02	; 2
		case 10: temp_int = report_data_a; break;
		case 11: temp_int = report_data_b; break;
		default: temp_int = 0; break;
	}
	
	sprintf((char *)out_buffer, "%c,%03d,%04d,%04d,%d,%04d,", i2c_timeout?'O':'X', 
     eee:	42 85       	ldd	r20, Z+10	; 0x0a
     ef0:	53 85       	ldd	r21, Z+11	; 0x0b
     ef2:	24 85       	ldd	r18, Z+12	; 0x0c
     ef4:	35 85       	ldd	r19, Z+13	; 0x0d
     ef6:	24 0f       	add	r18, r20
     ef8:	35 1f       	adc	r19, r21
     efa:	90 81       	ld	r25, Z
     efc:	41 81       	ldd	r20, Z+1	; 0x01
     efe:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <i2c_timeout>
     f02:	51 11       	cpse	r21, r1
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <serial_processing+0x372>
     f06:	58 e5       	ldi	r21, 0x58	; 88
     f08:	e0 e0       	ldi	r30, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <serial_processing+0x376>
     f0c:	5f e4       	ldi	r21, 0x4F	; 79
     f0e:	e0 e0       	ldi	r30, 0x00	; 0
     f10:	7f 93       	push	r23
     f12:	6f 93       	push	r22
     f14:	1f 92       	push	r1
     f16:	8f 93       	push	r24
     f18:	3f 93       	push	r19
     f1a:	2f 93       	push	r18
     f1c:	4f 93       	push	r20
     f1e:	9f 93       	push	r25
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	8f 93       	push	r24
     f24:	87 ee       	ldi	r24, 0xE7	; 231
     f26:	8f 93       	push	r24
     f28:	ef 93       	push	r30
     f2a:	5f 93       	push	r21
     f2c:	88 e3       	ldi	r24, 0x38	; 56
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	0d ef       	ldi	r16, 0xFD	; 253
     f36:	11 e0       	ldi	r17, 0x01	; 1
     f38:	1f 93       	push	r17
     f3a:	0f 93       	push	r16
     f3c:	0e 94 38 0b 	call	0x1670	; 0x1670 <sprintf>
		999, from_gilbot.get_steer, from_gilbot.get_hall_l+from_gilbot.get_hall_r, ret_cmd, temp_int);
	
	cal_checkdata = out_buffer[0];
     f40:	f8 01       	movw	r30, r16
     f42:	80 81       	ld	r24, Z
	temp_char = strlen((char *)out_buffer);
     f44:	01 90       	ld	r0, Z+
     f46:	00 20       	and	r0, r0
     f48:	e9 f7       	brne	.-6      	; 0xf44 <serial_processing+0x3aa>
     f4a:	31 97       	sbiw	r30, 0x01	; 1
     f4c:	8f 01       	movw	r16, r30
     f4e:	0d 5f       	subi	r16, 0xFD	; 253
     f50:	11 40       	sbci	r17, 0x01	; 1
	for(i=1; i<temp_char; i++) cal_checkdata ^= out_buffer[i];
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	02 30       	cpi	r16, 0x02	; 2
     f5e:	60 f0       	brcs	.+24     	; 0xf78 <serial_processing+0x3de>
     f60:	ee ef       	ldi	r30, 0xFE	; 254
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	02 50       	subi	r16, 0x02	; 2
     f66:	20 2f       	mov	r18, r16
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	3e 4f       	sbci	r19, 0xFE	; 254
     f6e:	91 91       	ld	r25, Z+
     f70:	89 27       	eor	r24, r25
     f72:	2e 17       	cp	r18, r30
     f74:	3f 07       	cpc	r19, r31
     f76:	d9 f7       	brne	.-10     	; 0xf6e <serial_processing+0x3d4>
	
	sprintf((char *)str_temp, "%03d\r", cal_checkdata);
     f78:	1f 92       	push	r1
     f7a:	8f 93       	push	r24
     f7c:	83 e5       	ldi	r24, 0x53	; 83
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	9f 93       	push	r25
     f82:	8f 93       	push	r24
     f84:	8e 01       	movw	r16, r28
     f86:	0f 5f       	subi	r16, 0xFF	; 255
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	1f 93       	push	r17
     f8c:	0f 93       	push	r16
     f8e:	0e 94 38 0b 	call	0x1670	; 0x1670 <sprintf>
	strcat((char *)out_buffer, (char *)str_temp);
     f92:	b8 01       	movw	r22, r16
     f94:	8d ef       	ldi	r24, 0xFD	; 253
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	0e 94 2d 0b 	call	0x165a	; 0x165a <strcat>
	
	out_uart_char(out_buffer, strlen((char *)out_buffer));
     f9c:	ed ef       	ldi	r30, 0xFD	; 253
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	01 90       	ld	r0, Z+
     fa2:	00 20       	and	r0, r0
     fa4:	e9 f7       	brne	.-6      	; 0xfa0 <serial_processing+0x406>
     fa6:	31 97       	sbiw	r30, 0x01	; 1
     fa8:	bf 01       	movw	r22, r30
     faa:	6d 5f       	subi	r22, 0xFD	; 253
     fac:	71 40       	sbci	r23, 0x01	; 1
     fae:	8d ef       	ldi	r24, 0xFD	; 253
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <out_uart_char>
	serial_available = 0;
     fb6:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <serial_available>
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
}
     fc6:	28 96       	adiw	r28, 0x08	; 8
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <global_control>:
		if(ctrl) PORTC|=(1<<pinNum);
		else PORTC&=~(1<<pinNum);
	}
}

void global_control(void){
     fdc:	ef 92       	push	r14
     fde:	0f 93       	push	r16
	if(TTLIN_SW){
     fe0:	4e 99       	sbic	0x09, 6	; 9
     fe2:	10 c0       	rjmp	.+32     	; 0x1004 <global_control+0x28>
		TTLOUT_STEER_ENA(1);
     fe4:	5d 9a       	sbi	0x0b, 5	; 11
		if(servo_drive_delays == 0) servo_drive_active(1, 90.0);
     fe6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <servo_drive_delays>
     fea:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <servo_drive_delays+0x1>
     fee:	89 2b       	or	r24, r25
     ff0:	09 f0       	breq	.+2      	; 0xff4 <global_control+0x18>
     ff2:	71 c0       	rjmp	.+226    	; 0x10d6 <global_control+0xfa>
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	64 eb       	ldi	r22, 0xB4	; 180
     ffa:	72 e4       	ldi	r23, 0x42	; 66
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	0e 94 4b 03 	call	0x696	; 0x696 <servo_drive_active>
    1002:	69 c0       	rjmp	.+210    	; 0x10d6 <global_control+0xfa>
	}
	else{
		if(i2c_timeout && (from_ctrl_pc.set_aimode == 3 || (from_ctrl_pc.set_aimode == 2 && from_gilbot.get_aimode == 1) || from_ctrl_pc.set_aimode == 1)){
    1004:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <i2c_timeout>
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <global_control+0x32>
    100c:	56 c0       	rjmp	.+172    	; 0x10ba <global_control+0xde>
    100e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <from_ctrl_pc+0x4>
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	59 f0       	breq	.+22     	; 0x102c <global_control+0x50>
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	31 f4       	brne	.+12     	; 0x1026 <global_control+0x4a>
    101a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <from_gilbot+0x14>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	09 f0       	breq	.+2      	; 0x1024 <global_control+0x48>
    1022:	4b c0       	rjmp	.+150    	; 0x10ba <global_control+0xde>
    1024:	03 c0       	rjmp	.+6      	; 0x102c <global_control+0x50>
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	09 f0       	breq	.+2      	; 0x102c <global_control+0x50>
    102a:	47 c0       	rjmp	.+142    	; 0x10ba <global_control+0xde>
			if(serial_rx_timeout && from_ctrl_pc.set_steer_degree <= 180){ //degree mode run
    102c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <serial_rx_timeout>
    1030:	88 23       	and	r24, r24
    1032:	a1 f1       	breq	.+104    	; 0x109c <global_control+0xc0>
    1034:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <from_ctrl_pc+0x6>
    1038:	85 3b       	cpi	r24, 0xB5	; 181
    103a:	a8 f4       	brcc	.+42     	; 0x1066 <global_control+0x8a>
				TTLOUT_STEER_ENA(1);
    103c:	5d 9a       	sbi	0x0b, 5	; 11
				if(servo_drive_delays == 0) servo_drive_active(1, from_ctrl_pc.set_steer_degree*1.0);
    103e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <servo_drive_delays>
    1042:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <servo_drive_delays+0x1>
    1046:	89 2b       	or	r24, r25
    1048:	09 f0       	breq	.+2      	; 0x104c <global_control+0x70>
    104a:	45 c0       	rjmp	.+138    	; 0x10d6 <global_control+0xfa>
    104c:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <from_ctrl_pc+0x6>
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__floatsisf>
    105a:	ab 01       	movw	r20, r22
    105c:	bc 01       	movw	r22, r24
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 4b 03 	call	0x696	; 0x696 <servo_drive_active>
    1064:	38 c0       	rjmp	.+112    	; 0x10d6 <global_control+0xfa>
			}
			else if(serial_rx_timeout && from_ctrl_pc.set_steer <= 1023){ //steer level mode run
    1066:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <from_ctrl_pc+0x7>
    106a:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <from_ctrl_pc+0x8>
    106e:	81 15       	cp	r24, r1
    1070:	94 40       	sbci	r25, 0x04	; 4
    1072:	a0 f4       	brcc	.+40     	; 0x109c <global_control+0xc0>
				TTLOUT_STEER_ENA(1);
    1074:	5d 9a       	sbi	0x0b, 5	; 11
				if(servo_drive_delays == 0) servo_drive_active(1, from_ctrl_pc.set_steer_degree*1.0);
    1076:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <servo_drive_delays>
    107a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <servo_drive_delays+0x1>
    107e:	89 2b       	or	r24, r25
    1080:	51 f5       	brne	.+84     	; 0x10d6 <global_control+0xfa>
    1082:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <from_ctrl_pc+0x6>
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__floatsisf>
    1090:	ab 01       	movw	r20, r22
    1092:	bc 01       	movw	r22, r24
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	0e 94 4b 03 	call	0x696	; 0x696 <servo_drive_active>
    109a:	1d c0       	rjmp	.+58     	; 0x10d6 <global_control+0xfa>
			}
			else{
				servo_drive_delays = 200;
    109c:	88 ec       	ldi	r24, 0xC8	; 200
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <servo_drive_delays+0x1>
    10a4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <servo_drive_delays>
				servo_drive_active(0, 250.0);
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	6a e7       	ldi	r22, 0x7A	; 122
    10ae:	73 e4       	ldi	r23, 0x43	; 67
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 4b 03 	call	0x696	; 0x696 <servo_drive_active>
				TTLOUT_STEER_ENA(0);
    10b6:	5d 98       	cbi	0x0b, 5	; 11
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <global_control+0xfa>
			}
		}
		else{
			servo_drive_delays = 200;
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <servo_drive_delays+0x1>
    10c2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <servo_drive_delays>
			servo_drive_active(0, 250.0);
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	6a e7       	ldi	r22, 0x7A	; 122
    10cc:	73 e4       	ldi	r23, 0x43	; 67
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 4b 03 	call	0x696	; 0x696 <servo_drive_active>
			TTLOUT_STEER_ENA(0);
    10d4:	5d 98       	cbi	0x0b, 5	; 11
		}
	}
	
	if(i2c_available) i2c_processing();
    10d6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i2c_available>
    10da:	88 23       	and	r24, r24
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <global_control+0x108>
    10de:	0e 94 cf 04 	call	0x99e	; 0x99e <i2c_processing>
    10e2:	37 c0       	rjmp	.+110    	; 0x1152 <global_control+0x176>
	else{
		if(i2c_trx_loop >= 7){
    10e4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <i2c_trx_loop>
    10e8:	87 30       	cpi	r24, 0x07	; 7
    10ea:	98 f1       	brcs	.+102    	; 0x1152 <global_control+0x176>
			i2c_trx_loop = 0;
    10ec:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <i2c_trx_loop>
			if(i2c_tx_respone > 3){
    10f0:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <i2c_tx_respone>
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	d0 f1       	brcs	.+116    	; 0x116c <global_control+0x190>
				i2c_trx_mode = 0;
    10f8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <i2c_trx_mode>
				ioetr_twim.com_state = IOETR_TWIM_STATE_IDLE;
    10fc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ioetr_twim>
				bug_report++;
    1100:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bug_report>
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <bug_report>
			
			if(i2c_trx_mode){
				js_twim_rx(0x59, 7); //수신요청
			}
			else if(i2c_tx_respone > 3){
				i2c_tx_respone = 0;
    110a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <i2c_tx_respone>
				js_twim_tx(0x55, "1234", 2);
    110e:	42 e0       	ldi	r20, 0x02	; 2
    1110:	69 e5       	ldi	r22, 0x59	; 89
    1112:	71 e0       	ldi	r23, 0x01	; 1
    1114:	85 e5       	ldi	r24, 0x55	; 85
    1116:	0e 94 b6 01 	call	0x36c	; 0x36c <js_twim_tx>
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <global_control+0x168>
				ioetr_twim.com_state = IOETR_TWIM_STATE_IDLE;
				bug_report++;
			}
			
			if(i2c_trx_mode){
				js_twim_rx(0x59, 7); //수신요청
    111c:	67 e0       	ldi	r22, 0x07	; 7
    111e:	89 e5       	ldi	r24, 0x59	; 89
    1120:	0e 94 de 01 	call	0x3bc	; 0x3bc <js_twim_rx>
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <global_control+0x168>
				i2c_tx_respone = 0;
				js_twim_tx(0x55, "1234", 2);
			}
			else{
				//ai_mode, drv_mode, drv_throttle, lamp_act, signal_lamp, horn_act
				i2c_transmit(from_ctrl_pc.set_aimode, from_ctrl_pc.set_drv_mode, from_ctrl_pc.set_drv_throttle, from_ctrl_pc.set_lamp, from_ctrl_pc.set_signal, from_ctrl_pc.set_horn);
    1126:	e4 ec       	ldi	r30, 0xC4	; 196
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	e5 80       	ldd	r14, Z+5	; 0x05
    112c:	03 81       	ldd	r16, Z+3	; 0x03
    112e:	22 81       	ldd	r18, Z+2	; 0x02
    1130:	41 81       	ldd	r20, Z+1	; 0x01
    1132:	60 81       	ld	r22, Z
    1134:	84 81       	ldd	r24, Z+4	; 0x04
    1136:	0e 94 89 04 	call	0x912	; 0x912 <i2c_transmit>
				i2c_tx_respone++;
    113a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <i2c_tx_respone>
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <i2c_tx_respone>
			}
			i2c_trx_mode = !i2c_trx_mode;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <i2c_trx_mode>
    114a:	91 11       	cpse	r25, r1
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <i2c_trx_mode>
		}
	}
	
	if(serial_rx_timeout == 0) car_control_stop();
    1152:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <serial_rx_timeout>
    1156:	81 11       	cpse	r24, r1
    1158:	02 c0       	rjmp	.+4      	; 0x115e <global_control+0x182>
    115a:	0e 94 48 04 	call	0x890	; 0x890 <car_control_stop>
	
	if(serial_available){
    115e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <serial_available>
    1162:	88 23       	and	r24, r24
    1164:	41 f0       	breq	.+16     	; 0x1176 <global_control+0x19a>
		serial_processing(serial_available);
    1166:	0e 94 cd 05 	call	0xb9a	; 0xb9a <serial_processing>
	}
}
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <global_control+0x19a>
				i2c_trx_mode = 0;
				ioetr_twim.com_state = IOETR_TWIM_STATE_IDLE;
				bug_report++;
			}
			
			if(i2c_trx_mode){
    116c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <i2c_trx_mode>
    1170:	81 11       	cpse	r24, r1
    1172:	d4 cf       	rjmp	.-88     	; 0x111c <global_control+0x140>
    1174:	d8 cf       	rjmp	.-80     	; 0x1126 <global_control+0x14a>
	if(serial_rx_timeout == 0) car_control_stop();
	
	if(serial_available){
		serial_processing(serial_available);
	}
}
    1176:	0f 91       	pop	r16
    1178:	ef 90       	pop	r14
    117a:	08 95       	ret

0000117c <main>:

unsigned int servo_drive_delays = 0;
unsigned char force_centering = 0;

int main(void){
	PORTB = 0b00000000; DDRB = 0b00000100;
    117c:	15 b8       	out	0x05, r1	; 5
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	84 b9       	out	0x04, r24	; 4
	PORTC = 0b00000000; DDRC = 0b00000011;
    1182:	18 b8       	out	0x08, r1	; 8
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	87 b9       	out	0x07, r24	; 7
	PORTD = 0b01000000; DDRD = 0b00100000;
    1188:	80 e4       	ldi	r24, 0x40	; 64
    118a:	8b b9       	out	0x0b, r24	; 11
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	8a b9       	out	0x0a, r24	; 10
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1190:	99 e0       	ldi	r25, 0x09	; 9
    1192:	88 e1       	ldi	r24, 0x18	; 24
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	a8 95       	wdr
    119a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	
	wdt_enable(WDTO_30MS);
	system_init();
    11a4:	0e 94 57 04 	call	0x8ae	; 0x8ae <system_init>
/* User custom init Code START************************************/	
	custom_port_init(2, 0);
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	0e 94 1e 04 	call	0x83c	; 0x83c <custom_port_init>
	custom_port_init(3, 0);
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	0e 94 1e 04 	call	0x83c	; 0x83c <custom_port_init>
/* User custom init Code END**************************************/
    while (1){
		wdt_reset();
    11b8:	a8 95       	wdr
		global_control();
    11ba:	0e 94 ee 07 	call	0xfdc	; 0xfdc <global_control>
		custom_control();
    11be:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <custom_control>
    11c2:	fa cf       	rjmp	.-12     	; 0x11b8 <main+0x3c>

000011c4 <__vector_14>:
	
	out_uart_char(out_buffer, strlen((char *)out_buffer));
	serial_available = 0;
}

ISR(TIMER0_COMPA_vect){
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
	if(timer_1ms_1 < 65535) timer_1ms_1++;
    11e6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <timer_1ms_1>
    11ea:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <timer_1ms_1+0x1>
    11ee:	8f 3f       	cpi	r24, 0xFF	; 255
    11f0:	2f ef       	ldi	r18, 0xFF	; 255
    11f2:	92 07       	cpc	r25, r18
    11f4:	29 f0       	breq	.+10     	; 0x1200 <__vector_14+0x3c>
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <timer_1ms_1+0x1>
    11fc:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <timer_1ms_1>
	if(timer_1ms_2 < 65535) timer_1ms_2++;
    1200:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_1ms_2>
    1204:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_1ms_2+0x1>
    1208:	8f 3f       	cpi	r24, 0xFF	; 255
    120a:	2f ef       	ldi	r18, 0xFF	; 255
    120c:	92 07       	cpc	r25, r18
    120e:	29 f0       	breq	.+10     	; 0x121a <__vector_14+0x56>
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer_1ms_2+0x1>
    1216:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer_1ms_2>
	if(i2c_trx_loop < 255) i2c_trx_loop++;
    121a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <i2c_trx_loop>
    121e:	8f 3f       	cpi	r24, 0xFF	; 255
    1220:	19 f0       	breq	.+6      	; 0x1228 <__vector_14+0x64>
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <i2c_trx_loop>
	if(i2c_timeout) i2c_timeout--;
    1228:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <i2c_timeout>
    122c:	88 23       	and	r24, r24
    122e:	19 f0       	breq	.+6      	; 0x1236 <__vector_14+0x72>
    1230:	81 50       	subi	r24, 0x01	; 1
    1232:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <i2c_timeout>
	if(serial_rx_timeout) serial_rx_timeout--;
    1236:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <serial_rx_timeout>
    123a:	88 23       	and	r24, r24
    123c:	19 f0       	breq	.+6      	; 0x1244 <__vector_14+0x80>
    123e:	81 50       	subi	r24, 0x01	; 1
    1240:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <serial_rx_timeout>
	if(servo_drive_delays) servo_drive_delays--;
    1244:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <servo_drive_delays>
    1248:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <servo_drive_delays+0x1>
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	29 f0       	breq	.+10     	; 0x125a <__vector_14+0x96>
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <servo_drive_delays+0x1>
    1256:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <servo_drive_delays>
	adc_read_run();
    125a:	0e 94 bf 02 	call	0x57e	; 0x57e <adc_read_run>
    125e:	ff 91       	pop	r31
    1260:	ef 91       	pop	r30
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	7f 91       	pop	r23
    126c:	6f 91       	pop	r22
    126e:	5f 91       	pop	r21
    1270:	4f 91       	pop	r20
    1272:	3f 91       	pop	r19
    1274:	2f 91       	pop	r18
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__subsf3>:
    1280:	50 58       	subi	r21, 0x80	; 128

00001282 <__addsf3>:
    1282:	bb 27       	eor	r27, r27
    1284:	aa 27       	eor	r26, r26
    1286:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__addsf3x>
    128a:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_round>
    128e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_pscA>
    1292:	38 f0       	brcs	.+14     	; 0x12a2 <__addsf3+0x20>
    1294:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_pscB>
    1298:	20 f0       	brcs	.+8      	; 0x12a2 <__addsf3+0x20>
    129a:	39 f4       	brne	.+14     	; 0x12aa <__addsf3+0x28>
    129c:	9f 3f       	cpi	r25, 0xFF	; 255
    129e:	19 f4       	brne	.+6      	; 0x12a6 <__addsf3+0x24>
    12a0:	26 f4       	brtc	.+8      	; 0x12aa <__addsf3+0x28>
    12a2:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_nan>
    12a6:	0e f4       	brtc	.+2      	; 0x12aa <__addsf3+0x28>
    12a8:	e0 95       	com	r30
    12aa:	e7 fb       	bst	r30, 7
    12ac:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_inf>

000012b0 <__addsf3x>:
    12b0:	e9 2f       	mov	r30, r25
    12b2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__fp_split3>
    12b6:	58 f3       	brcs	.-42     	; 0x128e <__addsf3+0xc>
    12b8:	ba 17       	cp	r27, r26
    12ba:	62 07       	cpc	r22, r18
    12bc:	73 07       	cpc	r23, r19
    12be:	84 07       	cpc	r24, r20
    12c0:	95 07       	cpc	r25, r21
    12c2:	20 f0       	brcs	.+8      	; 0x12cc <__addsf3x+0x1c>
    12c4:	79 f4       	brne	.+30     	; 0x12e4 <__addsf3x+0x34>
    12c6:	a6 f5       	brtc	.+104    	; 0x1330 <__addsf3x+0x80>
    12c8:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_zero>
    12cc:	0e f4       	brtc	.+2      	; 0x12d0 <__addsf3x+0x20>
    12ce:	e0 95       	com	r30
    12d0:	0b 2e       	mov	r0, r27
    12d2:	ba 2f       	mov	r27, r26
    12d4:	a0 2d       	mov	r26, r0
    12d6:	0b 01       	movw	r0, r22
    12d8:	b9 01       	movw	r22, r18
    12da:	90 01       	movw	r18, r0
    12dc:	0c 01       	movw	r0, r24
    12de:	ca 01       	movw	r24, r20
    12e0:	a0 01       	movw	r20, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	ff 27       	eor	r31, r31
    12e6:	59 1b       	sub	r21, r25
    12e8:	99 f0       	breq	.+38     	; 0x1310 <__addsf3x+0x60>
    12ea:	59 3f       	cpi	r21, 0xF9	; 249
    12ec:	50 f4       	brcc	.+20     	; 0x1302 <__addsf3x+0x52>
    12ee:	50 3e       	cpi	r21, 0xE0	; 224
    12f0:	68 f1       	brcs	.+90     	; 0x134c <__addsf3x+0x9c>
    12f2:	1a 16       	cp	r1, r26
    12f4:	f0 40       	sbci	r31, 0x00	; 0
    12f6:	a2 2f       	mov	r26, r18
    12f8:	23 2f       	mov	r18, r19
    12fa:	34 2f       	mov	r19, r20
    12fc:	44 27       	eor	r20, r20
    12fe:	58 5f       	subi	r21, 0xF8	; 248
    1300:	f3 cf       	rjmp	.-26     	; 0x12e8 <__addsf3x+0x38>
    1302:	46 95       	lsr	r20
    1304:	37 95       	ror	r19
    1306:	27 95       	ror	r18
    1308:	a7 95       	ror	r26
    130a:	f0 40       	sbci	r31, 0x00	; 0
    130c:	53 95       	inc	r21
    130e:	c9 f7       	brne	.-14     	; 0x1302 <__addsf3x+0x52>
    1310:	7e f4       	brtc	.+30     	; 0x1330 <__addsf3x+0x80>
    1312:	1f 16       	cp	r1, r31
    1314:	ba 0b       	sbc	r27, r26
    1316:	62 0b       	sbc	r22, r18
    1318:	73 0b       	sbc	r23, r19
    131a:	84 0b       	sbc	r24, r20
    131c:	ba f0       	brmi	.+46     	; 0x134c <__addsf3x+0x9c>
    131e:	91 50       	subi	r25, 0x01	; 1
    1320:	a1 f0       	breq	.+40     	; 0x134a <__addsf3x+0x9a>
    1322:	ff 0f       	add	r31, r31
    1324:	bb 1f       	adc	r27, r27
    1326:	66 1f       	adc	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	c2 f7       	brpl	.-16     	; 0x131e <__addsf3x+0x6e>
    132e:	0e c0       	rjmp	.+28     	; 0x134c <__addsf3x+0x9c>
    1330:	ba 0f       	add	r27, r26
    1332:	62 1f       	adc	r22, r18
    1334:	73 1f       	adc	r23, r19
    1336:	84 1f       	adc	r24, r20
    1338:	48 f4       	brcc	.+18     	; 0x134c <__addsf3x+0x9c>
    133a:	87 95       	ror	r24
    133c:	77 95       	ror	r23
    133e:	67 95       	ror	r22
    1340:	b7 95       	ror	r27
    1342:	f7 95       	ror	r31
    1344:	9e 3f       	cpi	r25, 0xFE	; 254
    1346:	08 f0       	brcs	.+2      	; 0x134a <__addsf3x+0x9a>
    1348:	b0 cf       	rjmp	.-160    	; 0x12aa <__addsf3+0x28>
    134a:	93 95       	inc	r25
    134c:	88 0f       	add	r24, r24
    134e:	08 f0       	brcs	.+2      	; 0x1352 <__addsf3x+0xa2>
    1350:	99 27       	eor	r25, r25
    1352:	ee 0f       	add	r30, r30
    1354:	97 95       	ror	r25
    1356:	87 95       	ror	r24
    1358:	08 95       	ret

0000135a <__cmpsf2>:
    135a:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_cmp>
    135e:	08 f4       	brcc	.+2      	; 0x1362 <__cmpsf2+0x8>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	08 95       	ret

00001364 <__fixunssfsi>:
    1364:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_splitA>
    1368:	88 f0       	brcs	.+34     	; 0x138c <__fixunssfsi+0x28>
    136a:	9f 57       	subi	r25, 0x7F	; 127
    136c:	98 f0       	brcs	.+38     	; 0x1394 <__fixunssfsi+0x30>
    136e:	b9 2f       	mov	r27, r25
    1370:	99 27       	eor	r25, r25
    1372:	b7 51       	subi	r27, 0x17	; 23
    1374:	b0 f0       	brcs	.+44     	; 0x13a2 <__fixunssfsi+0x3e>
    1376:	e1 f0       	breq	.+56     	; 0x13b0 <__fixunssfsi+0x4c>
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	1a f0       	brmi	.+6      	; 0x1388 <__fixunssfsi+0x24>
    1382:	ba 95       	dec	r27
    1384:	c9 f7       	brne	.-14     	; 0x1378 <__fixunssfsi+0x14>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <__fixunssfsi+0x4c>
    1388:	b1 30       	cpi	r27, 0x01	; 1
    138a:	91 f0       	breq	.+36     	; 0x13b0 <__fixunssfsi+0x4c>
    138c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_zero>
    1390:	b1 e0       	ldi	r27, 0x01	; 1
    1392:	08 95       	ret
    1394:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_zero>
    1398:	67 2f       	mov	r22, r23
    139a:	78 2f       	mov	r23, r24
    139c:	88 27       	eor	r24, r24
    139e:	b8 5f       	subi	r27, 0xF8	; 248
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <__fixunssfsi+0x4c>
    13a2:	b9 3f       	cpi	r27, 0xF9	; 249
    13a4:	cc f3       	brlt	.-14     	; 0x1398 <__fixunssfsi+0x34>
    13a6:	86 95       	lsr	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b3 95       	inc	r27
    13ae:	d9 f7       	brne	.-10     	; 0x13a6 <__fixunssfsi+0x42>
    13b0:	3e f4       	brtc	.+14     	; 0x13c0 <__fixunssfsi+0x5c>
    13b2:	90 95       	com	r25
    13b4:	80 95       	com	r24
    13b6:	70 95       	com	r23
    13b8:	61 95       	neg	r22
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	08 95       	ret

000013c2 <__floatunsisf>:
    13c2:	e8 94       	clt
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <__floatsisf+0x12>

000013c6 <__floatsisf>:
    13c6:	97 fb       	bst	r25, 7
    13c8:	3e f4       	brtc	.+14     	; 0x13d8 <__floatsisf+0x12>
    13ca:	90 95       	com	r25
    13cc:	80 95       	com	r24
    13ce:	70 95       	com	r23
    13d0:	61 95       	neg	r22
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	99 23       	and	r25, r25
    13da:	a9 f0       	breq	.+42     	; 0x1406 <__floatsisf+0x40>
    13dc:	f9 2f       	mov	r31, r25
    13de:	96 e9       	ldi	r25, 0x96	; 150
    13e0:	bb 27       	eor	r27, r27
    13e2:	93 95       	inc	r25
    13e4:	f6 95       	lsr	r31
    13e6:	87 95       	ror	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f1 11       	cpse	r31, r1
    13f0:	f8 cf       	rjmp	.-16     	; 0x13e2 <__floatsisf+0x1c>
    13f2:	fa f4       	brpl	.+62     	; 0x1432 <__floatsisf+0x6c>
    13f4:	bb 0f       	add	r27, r27
    13f6:	11 f4       	brne	.+4      	; 0x13fc <__floatsisf+0x36>
    13f8:	60 ff       	sbrs	r22, 0
    13fa:	1b c0       	rjmp	.+54     	; 0x1432 <__floatsisf+0x6c>
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	16 c0       	rjmp	.+44     	; 0x1432 <__floatsisf+0x6c>
    1406:	88 23       	and	r24, r24
    1408:	11 f0       	breq	.+4      	; 0x140e <__floatsisf+0x48>
    140a:	96 e9       	ldi	r25, 0x96	; 150
    140c:	11 c0       	rjmp	.+34     	; 0x1430 <__floatsisf+0x6a>
    140e:	77 23       	and	r23, r23
    1410:	21 f0       	breq	.+8      	; 0x141a <__floatsisf+0x54>
    1412:	9e e8       	ldi	r25, 0x8E	; 142
    1414:	87 2f       	mov	r24, r23
    1416:	76 2f       	mov	r23, r22
    1418:	05 c0       	rjmp	.+10     	; 0x1424 <__floatsisf+0x5e>
    141a:	66 23       	and	r22, r22
    141c:	71 f0       	breq	.+28     	; 0x143a <__floatsisf+0x74>
    141e:	96 e8       	ldi	r25, 0x86	; 134
    1420:	86 2f       	mov	r24, r22
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	2a f0       	brmi	.+10     	; 0x1432 <__floatsisf+0x6c>
    1428:	9a 95       	dec	r25
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	da f7       	brpl	.-10     	; 0x1428 <__floatsisf+0x62>
    1432:	88 0f       	add	r24, r24
    1434:	96 95       	lsr	r25
    1436:	87 95       	ror	r24
    1438:	97 f9       	bld	r25, 7
    143a:	08 95       	ret

0000143c <__fp_cmp>:
    143c:	99 0f       	add	r25, r25
    143e:	00 08       	sbc	r0, r0
    1440:	55 0f       	add	r21, r21
    1442:	aa 0b       	sbc	r26, r26
    1444:	e0 e8       	ldi	r30, 0x80	; 128
    1446:	fe ef       	ldi	r31, 0xFE	; 254
    1448:	16 16       	cp	r1, r22
    144a:	17 06       	cpc	r1, r23
    144c:	e8 07       	cpc	r30, r24
    144e:	f9 07       	cpc	r31, r25
    1450:	c0 f0       	brcs	.+48     	; 0x1482 <__fp_cmp+0x46>
    1452:	12 16       	cp	r1, r18
    1454:	13 06       	cpc	r1, r19
    1456:	e4 07       	cpc	r30, r20
    1458:	f5 07       	cpc	r31, r21
    145a:	98 f0       	brcs	.+38     	; 0x1482 <__fp_cmp+0x46>
    145c:	62 1b       	sub	r22, r18
    145e:	73 0b       	sbc	r23, r19
    1460:	84 0b       	sbc	r24, r20
    1462:	95 0b       	sbc	r25, r21
    1464:	39 f4       	brne	.+14     	; 0x1474 <__fp_cmp+0x38>
    1466:	0a 26       	eor	r0, r26
    1468:	61 f0       	breq	.+24     	; 0x1482 <__fp_cmp+0x46>
    146a:	23 2b       	or	r18, r19
    146c:	24 2b       	or	r18, r20
    146e:	25 2b       	or	r18, r21
    1470:	21 f4       	brne	.+8      	; 0x147a <__fp_cmp+0x3e>
    1472:	08 95       	ret
    1474:	0a 26       	eor	r0, r26
    1476:	09 f4       	brne	.+2      	; 0x147a <__fp_cmp+0x3e>
    1478:	a1 40       	sbci	r26, 0x01	; 1
    147a:	a6 95       	lsr	r26
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	81 1d       	adc	r24, r1
    1480:	81 1d       	adc	r24, r1
    1482:	08 95       	ret

00001484 <__fp_inf>:
    1484:	97 f9       	bld	r25, 7
    1486:	9f 67       	ori	r25, 0x7F	; 127
    1488:	80 e8       	ldi	r24, 0x80	; 128
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	08 95       	ret

00001490 <__fp_nan>:
    1490:	9f ef       	ldi	r25, 0xFF	; 255
    1492:	80 ec       	ldi	r24, 0xC0	; 192
    1494:	08 95       	ret

00001496 <__fp_pscA>:
    1496:	00 24       	eor	r0, r0
    1498:	0a 94       	dec	r0
    149a:	16 16       	cp	r1, r22
    149c:	17 06       	cpc	r1, r23
    149e:	18 06       	cpc	r1, r24
    14a0:	09 06       	cpc	r0, r25
    14a2:	08 95       	ret

000014a4 <__fp_pscB>:
    14a4:	00 24       	eor	r0, r0
    14a6:	0a 94       	dec	r0
    14a8:	12 16       	cp	r1, r18
    14aa:	13 06       	cpc	r1, r19
    14ac:	14 06       	cpc	r1, r20
    14ae:	05 06       	cpc	r0, r21
    14b0:	08 95       	ret

000014b2 <__fp_round>:
    14b2:	09 2e       	mov	r0, r25
    14b4:	03 94       	inc	r0
    14b6:	00 0c       	add	r0, r0
    14b8:	11 f4       	brne	.+4      	; 0x14be <__fp_round+0xc>
    14ba:	88 23       	and	r24, r24
    14bc:	52 f0       	brmi	.+20     	; 0x14d2 <__fp_round+0x20>
    14be:	bb 0f       	add	r27, r27
    14c0:	40 f4       	brcc	.+16     	; 0x14d2 <__fp_round+0x20>
    14c2:	bf 2b       	or	r27, r31
    14c4:	11 f4       	brne	.+4      	; 0x14ca <__fp_round+0x18>
    14c6:	60 ff       	sbrs	r22, 0
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <__fp_round+0x20>
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	8f 4f       	sbci	r24, 0xFF	; 255
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	08 95       	ret

000014d4 <__fp_split3>:
    14d4:	57 fd       	sbrc	r21, 7
    14d6:	90 58       	subi	r25, 0x80	; 128
    14d8:	44 0f       	add	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	59 f0       	breq	.+22     	; 0x14f4 <__fp_splitA+0x10>
    14de:	5f 3f       	cpi	r21, 0xFF	; 255
    14e0:	71 f0       	breq	.+28     	; 0x14fe <__fp_splitA+0x1a>
    14e2:	47 95       	ror	r20

000014e4 <__fp_splitA>:
    14e4:	88 0f       	add	r24, r24
    14e6:	97 fb       	bst	r25, 7
    14e8:	99 1f       	adc	r25, r25
    14ea:	61 f0       	breq	.+24     	; 0x1504 <__fp_splitA+0x20>
    14ec:	9f 3f       	cpi	r25, 0xFF	; 255
    14ee:	79 f0       	breq	.+30     	; 0x150e <__fp_splitA+0x2a>
    14f0:	87 95       	ror	r24
    14f2:	08 95       	ret
    14f4:	12 16       	cp	r1, r18
    14f6:	13 06       	cpc	r1, r19
    14f8:	14 06       	cpc	r1, r20
    14fa:	55 1f       	adc	r21, r21
    14fc:	f2 cf       	rjmp	.-28     	; 0x14e2 <__fp_split3+0xe>
    14fe:	46 95       	lsr	r20
    1500:	f1 df       	rcall	.-30     	; 0x14e4 <__fp_splitA>
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <__fp_splitA+0x30>
    1504:	16 16       	cp	r1, r22
    1506:	17 06       	cpc	r1, r23
    1508:	18 06       	cpc	r1, r24
    150a:	99 1f       	adc	r25, r25
    150c:	f1 cf       	rjmp	.-30     	; 0x14f0 <__fp_splitA+0xc>
    150e:	86 95       	lsr	r24
    1510:	71 05       	cpc	r23, r1
    1512:	61 05       	cpc	r22, r1
    1514:	08 94       	sec
    1516:	08 95       	ret

00001518 <__fp_zero>:
    1518:	e8 94       	clt

0000151a <__fp_szero>:
    151a:	bb 27       	eor	r27, r27
    151c:	66 27       	eor	r22, r22
    151e:	77 27       	eor	r23, r23
    1520:	cb 01       	movw	r24, r22
    1522:	97 f9       	bld	r25, 7
    1524:	08 95       	ret

00001526 <__gesf2>:
    1526:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_cmp>
    152a:	08 f4       	brcc	.+2      	; 0x152e <__gesf2+0x8>
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	08 95       	ret

00001530 <__mulsf3>:
    1530:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__mulsf3x>
    1534:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_round>
    1538:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_pscA>
    153c:	38 f0       	brcs	.+14     	; 0x154c <__mulsf3+0x1c>
    153e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_pscB>
    1542:	20 f0       	brcs	.+8      	; 0x154c <__mulsf3+0x1c>
    1544:	95 23       	and	r25, r21
    1546:	11 f0       	breq	.+4      	; 0x154c <__mulsf3+0x1c>
    1548:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_inf>
    154c:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_nan>
    1550:	11 24       	eor	r1, r1
    1552:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__fp_szero>

00001556 <__mulsf3x>:
    1556:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__fp_split3>
    155a:	70 f3       	brcs	.-36     	; 0x1538 <__mulsf3+0x8>

0000155c <__mulsf3_pse>:
    155c:	95 9f       	mul	r25, r21
    155e:	c1 f3       	breq	.-16     	; 0x1550 <__mulsf3+0x20>
    1560:	95 0f       	add	r25, r21
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	55 1f       	adc	r21, r21
    1566:	62 9f       	mul	r22, r18
    1568:	f0 01       	movw	r30, r0
    156a:	72 9f       	mul	r23, r18
    156c:	bb 27       	eor	r27, r27
    156e:	f0 0d       	add	r31, r0
    1570:	b1 1d       	adc	r27, r1
    1572:	63 9f       	mul	r22, r19
    1574:	aa 27       	eor	r26, r26
    1576:	f0 0d       	add	r31, r0
    1578:	b1 1d       	adc	r27, r1
    157a:	aa 1f       	adc	r26, r26
    157c:	64 9f       	mul	r22, r20
    157e:	66 27       	eor	r22, r22
    1580:	b0 0d       	add	r27, r0
    1582:	a1 1d       	adc	r26, r1
    1584:	66 1f       	adc	r22, r22
    1586:	82 9f       	mul	r24, r18
    1588:	22 27       	eor	r18, r18
    158a:	b0 0d       	add	r27, r0
    158c:	a1 1d       	adc	r26, r1
    158e:	62 1f       	adc	r22, r18
    1590:	73 9f       	mul	r23, r19
    1592:	b0 0d       	add	r27, r0
    1594:	a1 1d       	adc	r26, r1
    1596:	62 1f       	adc	r22, r18
    1598:	83 9f       	mul	r24, r19
    159a:	a0 0d       	add	r26, r0
    159c:	61 1d       	adc	r22, r1
    159e:	22 1f       	adc	r18, r18
    15a0:	74 9f       	mul	r23, r20
    15a2:	33 27       	eor	r19, r19
    15a4:	a0 0d       	add	r26, r0
    15a6:	61 1d       	adc	r22, r1
    15a8:	23 1f       	adc	r18, r19
    15aa:	84 9f       	mul	r24, r20
    15ac:	60 0d       	add	r22, r0
    15ae:	21 1d       	adc	r18, r1
    15b0:	82 2f       	mov	r24, r18
    15b2:	76 2f       	mov	r23, r22
    15b4:	6a 2f       	mov	r22, r26
    15b6:	11 24       	eor	r1, r1
    15b8:	9f 57       	subi	r25, 0x7F	; 127
    15ba:	50 40       	sbci	r21, 0x00	; 0
    15bc:	9a f0       	brmi	.+38     	; 0x15e4 <__mulsf3_pse+0x88>
    15be:	f1 f0       	breq	.+60     	; 0x15fc <__mulsf3_pse+0xa0>
    15c0:	88 23       	and	r24, r24
    15c2:	4a f0       	brmi	.+18     	; 0x15d6 <__mulsf3_pse+0x7a>
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	bb 1f       	adc	r27, r27
    15ca:	66 1f       	adc	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	91 50       	subi	r25, 0x01	; 1
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	a9 f7       	brne	.-22     	; 0x15c0 <__mulsf3_pse+0x64>
    15d6:	9e 3f       	cpi	r25, 0xFE	; 254
    15d8:	51 05       	cpc	r21, r1
    15da:	80 f0       	brcs	.+32     	; 0x15fc <__mulsf3_pse+0xa0>
    15dc:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_inf>
    15e0:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__fp_szero>
    15e4:	5f 3f       	cpi	r21, 0xFF	; 255
    15e6:	e4 f3       	brlt	.-8      	; 0x15e0 <__mulsf3_pse+0x84>
    15e8:	98 3e       	cpi	r25, 0xE8	; 232
    15ea:	d4 f3       	brlt	.-12     	; 0x15e0 <__mulsf3_pse+0x84>
    15ec:	86 95       	lsr	r24
    15ee:	77 95       	ror	r23
    15f0:	67 95       	ror	r22
    15f2:	b7 95       	ror	r27
    15f4:	f7 95       	ror	r31
    15f6:	e7 95       	ror	r30
    15f8:	9f 5f       	subi	r25, 0xFF	; 255
    15fa:	c1 f7       	brne	.-16     	; 0x15ec <__mulsf3_pse+0x90>
    15fc:	fe 2b       	or	r31, r30
    15fe:	88 0f       	add	r24, r24
    1600:	91 1d       	adc	r25, r1
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	97 f9       	bld	r25, 7
    1608:	08 95       	ret

0000160a <__udivmodsi4>:
    160a:	a1 e2       	ldi	r26, 0x21	; 33
    160c:	1a 2e       	mov	r1, r26
    160e:	aa 1b       	sub	r26, r26
    1610:	bb 1b       	sub	r27, r27
    1612:	fd 01       	movw	r30, r26
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <__udivmodsi4_ep>

00001616 <__udivmodsi4_loop>:
    1616:	aa 1f       	adc	r26, r26
    1618:	bb 1f       	adc	r27, r27
    161a:	ee 1f       	adc	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	a2 17       	cp	r26, r18
    1620:	b3 07       	cpc	r27, r19
    1622:	e4 07       	cpc	r30, r20
    1624:	f5 07       	cpc	r31, r21
    1626:	20 f0       	brcs	.+8      	; 0x1630 <__udivmodsi4_ep>
    1628:	a2 1b       	sub	r26, r18
    162a:	b3 0b       	sbc	r27, r19
    162c:	e4 0b       	sbc	r30, r20
    162e:	f5 0b       	sbc	r31, r21

00001630 <__udivmodsi4_ep>:
    1630:	66 1f       	adc	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	1a 94       	dec	r1
    163a:	69 f7       	brne	.-38     	; 0x1616 <__udivmodsi4_loop>
    163c:	60 95       	com	r22
    163e:	70 95       	com	r23
    1640:	80 95       	com	r24
    1642:	90 95       	com	r25
    1644:	9b 01       	movw	r18, r22
    1646:	ac 01       	movw	r20, r24
    1648:	bd 01       	movw	r22, r26
    164a:	cf 01       	movw	r24, r30
    164c:	08 95       	ret

0000164e <__tablejump2__>:
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	05 90       	lpm	r0, Z+
    1654:	f4 91       	lpm	r31, Z
    1656:	e0 2d       	mov	r30, r0
    1658:	09 94       	ijmp

0000165a <strcat>:
    165a:	fb 01       	movw	r30, r22
    165c:	dc 01       	movw	r26, r24
    165e:	0d 90       	ld	r0, X+
    1660:	00 20       	and	r0, r0
    1662:	e9 f7       	brne	.-6      	; 0x165e <strcat+0x4>
    1664:	11 97       	sbiw	r26, 0x01	; 1
    1666:	01 90       	ld	r0, Z+
    1668:	0d 92       	st	X+, r0
    166a:	00 20       	and	r0, r0
    166c:	e1 f7       	brne	.-8      	; 0x1666 <strcat+0xc>
    166e:	08 95       	ret

00001670 <sprintf>:
    1670:	ae e0       	ldi	r26, 0x0E	; 14
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e3       	ldi	r30, 0x3E	; 62
    1676:	fb e0       	ldi	r31, 0x0B	; 11
    1678:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__prologue_saves__+0x1c>
    167c:	0d 89       	ldd	r16, Y+21	; 0x15
    167e:	1e 89       	ldd	r17, Y+22	; 0x16
    1680:	86 e0       	ldi	r24, 0x06	; 6
    1682:	8c 83       	std	Y+4, r24	; 0x04
    1684:	1a 83       	std	Y+2, r17	; 0x02
    1686:	09 83       	std	Y+1, r16	; 0x01
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f e7       	ldi	r25, 0x7F	; 127
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	ae 01       	movw	r20, r28
    1692:	47 5e       	subi	r20, 0xE7	; 231
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	6f 89       	ldd	r22, Y+23	; 0x17
    1698:	78 8d       	ldd	r23, Y+24	; 0x18
    169a:	ce 01       	movw	r24, r28
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vfprintf>
    16a2:	ef 81       	ldd	r30, Y+7	; 0x07
    16a4:	f8 85       	ldd	r31, Y+8	; 0x08
    16a6:	e0 0f       	add	r30, r16
    16a8:	f1 1f       	adc	r31, r17
    16aa:	10 82       	st	Z, r1
    16ac:	2e 96       	adiw	r28, 0x0e	; 14
    16ae:	e4 e0       	ldi	r30, 0x04	; 4
    16b0:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__epilogue_restores__+0x1c>

000016b4 <vfprintf>:
    16b4:	ab e0       	ldi	r26, 0x0B	; 11
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	fb e0       	ldi	r31, 0x0B	; 11
    16bc:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__>
    16c0:	6c 01       	movw	r12, r24
    16c2:	7b 01       	movw	r14, r22
    16c4:	8a 01       	movw	r16, r20
    16c6:	fc 01       	movw	r30, r24
    16c8:	17 82       	std	Z+7, r1	; 0x07
    16ca:	16 82       	std	Z+6, r1	; 0x06
    16cc:	83 81       	ldd	r24, Z+3	; 0x03
    16ce:	81 ff       	sbrs	r24, 1
    16d0:	cc c1       	rjmp	.+920    	; 0x1a6a <vfprintf+0x3b6>
    16d2:	ce 01       	movw	r24, r28
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	3c 01       	movw	r6, r24
    16d8:	f6 01       	movw	r30, r12
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	f7 01       	movw	r30, r14
    16de:	93 fd       	sbrc	r25, 3
    16e0:	85 91       	lpm	r24, Z+
    16e2:	93 ff       	sbrs	r25, 3
    16e4:	81 91       	ld	r24, Z+
    16e6:	7f 01       	movw	r14, r30
    16e8:	88 23       	and	r24, r24
    16ea:	09 f4       	brne	.+2      	; 0x16ee <vfprintf+0x3a>
    16ec:	ba c1       	rjmp	.+884    	; 0x1a62 <vfprintf+0x3ae>
    16ee:	85 32       	cpi	r24, 0x25	; 37
    16f0:	39 f4       	brne	.+14     	; 0x1700 <vfprintf+0x4c>
    16f2:	93 fd       	sbrc	r25, 3
    16f4:	85 91       	lpm	r24, Z+
    16f6:	93 ff       	sbrs	r25, 3
    16f8:	81 91       	ld	r24, Z+
    16fa:	7f 01       	movw	r14, r30
    16fc:	85 32       	cpi	r24, 0x25	; 37
    16fe:	29 f4       	brne	.+10     	; 0x170a <vfprintf+0x56>
    1700:	b6 01       	movw	r22, r12
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    1708:	e7 cf       	rjmp	.-50     	; 0x16d8 <vfprintf+0x24>
    170a:	91 2c       	mov	r9, r1
    170c:	21 2c       	mov	r2, r1
    170e:	31 2c       	mov	r3, r1
    1710:	ff e1       	ldi	r31, 0x1F	; 31
    1712:	f3 15       	cp	r31, r3
    1714:	d8 f0       	brcs	.+54     	; 0x174c <vfprintf+0x98>
    1716:	8b 32       	cpi	r24, 0x2B	; 43
    1718:	79 f0       	breq	.+30     	; 0x1738 <vfprintf+0x84>
    171a:	38 f4       	brcc	.+14     	; 0x172a <vfprintf+0x76>
    171c:	80 32       	cpi	r24, 0x20	; 32
    171e:	79 f0       	breq	.+30     	; 0x173e <vfprintf+0x8a>
    1720:	83 32       	cpi	r24, 0x23	; 35
    1722:	a1 f4       	brne	.+40     	; 0x174c <vfprintf+0x98>
    1724:	23 2d       	mov	r18, r3
    1726:	20 61       	ori	r18, 0x10	; 16
    1728:	1d c0       	rjmp	.+58     	; 0x1764 <vfprintf+0xb0>
    172a:	8d 32       	cpi	r24, 0x2D	; 45
    172c:	61 f0       	breq	.+24     	; 0x1746 <vfprintf+0x92>
    172e:	80 33       	cpi	r24, 0x30	; 48
    1730:	69 f4       	brne	.+26     	; 0x174c <vfprintf+0x98>
    1732:	23 2d       	mov	r18, r3
    1734:	21 60       	ori	r18, 0x01	; 1
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <vfprintf+0xb0>
    1738:	83 2d       	mov	r24, r3
    173a:	82 60       	ori	r24, 0x02	; 2
    173c:	38 2e       	mov	r3, r24
    173e:	e3 2d       	mov	r30, r3
    1740:	e4 60       	ori	r30, 0x04	; 4
    1742:	3e 2e       	mov	r3, r30
    1744:	2a c0       	rjmp	.+84     	; 0x179a <vfprintf+0xe6>
    1746:	f3 2d       	mov	r31, r3
    1748:	f8 60       	ori	r31, 0x08	; 8
    174a:	1d c0       	rjmp	.+58     	; 0x1786 <vfprintf+0xd2>
    174c:	37 fc       	sbrc	r3, 7
    174e:	2d c0       	rjmp	.+90     	; 0x17aa <vfprintf+0xf6>
    1750:	20 ed       	ldi	r18, 0xD0	; 208
    1752:	28 0f       	add	r18, r24
    1754:	2a 30       	cpi	r18, 0x0A	; 10
    1756:	40 f0       	brcs	.+16     	; 0x1768 <vfprintf+0xb4>
    1758:	8e 32       	cpi	r24, 0x2E	; 46
    175a:	b9 f4       	brne	.+46     	; 0x178a <vfprintf+0xd6>
    175c:	36 fc       	sbrc	r3, 6
    175e:	81 c1       	rjmp	.+770    	; 0x1a62 <vfprintf+0x3ae>
    1760:	23 2d       	mov	r18, r3
    1762:	20 64       	ori	r18, 0x40	; 64
    1764:	32 2e       	mov	r3, r18
    1766:	19 c0       	rjmp	.+50     	; 0x179a <vfprintf+0xe6>
    1768:	36 fe       	sbrs	r3, 6
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0xc4>
    176c:	8a e0       	ldi	r24, 0x0A	; 10
    176e:	98 9e       	mul	r9, r24
    1770:	20 0d       	add	r18, r0
    1772:	11 24       	eor	r1, r1
    1774:	92 2e       	mov	r9, r18
    1776:	11 c0       	rjmp	.+34     	; 0x179a <vfprintf+0xe6>
    1778:	ea e0       	ldi	r30, 0x0A	; 10
    177a:	2e 9e       	mul	r2, r30
    177c:	20 0d       	add	r18, r0
    177e:	11 24       	eor	r1, r1
    1780:	22 2e       	mov	r2, r18
    1782:	f3 2d       	mov	r31, r3
    1784:	f0 62       	ori	r31, 0x20	; 32
    1786:	3f 2e       	mov	r3, r31
    1788:	08 c0       	rjmp	.+16     	; 0x179a <vfprintf+0xe6>
    178a:	8c 36       	cpi	r24, 0x6C	; 108
    178c:	21 f4       	brne	.+8      	; 0x1796 <vfprintf+0xe2>
    178e:	83 2d       	mov	r24, r3
    1790:	80 68       	ori	r24, 0x80	; 128
    1792:	38 2e       	mov	r3, r24
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0xe6>
    1796:	88 36       	cpi	r24, 0x68	; 104
    1798:	41 f4       	brne	.+16     	; 0x17aa <vfprintf+0xf6>
    179a:	f7 01       	movw	r30, r14
    179c:	93 fd       	sbrc	r25, 3
    179e:	85 91       	lpm	r24, Z+
    17a0:	93 ff       	sbrs	r25, 3
    17a2:	81 91       	ld	r24, Z+
    17a4:	7f 01       	movw	r14, r30
    17a6:	81 11       	cpse	r24, r1
    17a8:	b3 cf       	rjmp	.-154    	; 0x1710 <vfprintf+0x5c>
    17aa:	98 2f       	mov	r25, r24
    17ac:	9f 7d       	andi	r25, 0xDF	; 223
    17ae:	95 54       	subi	r25, 0x45	; 69
    17b0:	93 30       	cpi	r25, 0x03	; 3
    17b2:	28 f4       	brcc	.+10     	; 0x17be <vfprintf+0x10a>
    17b4:	0c 5f       	subi	r16, 0xFC	; 252
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	9f e3       	ldi	r25, 0x3F	; 63
    17ba:	99 83       	std	Y+1, r25	; 0x01
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <vfprintf+0x124>
    17be:	83 36       	cpi	r24, 0x63	; 99
    17c0:	31 f0       	breq	.+12     	; 0x17ce <vfprintf+0x11a>
    17c2:	83 37       	cpi	r24, 0x73	; 115
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <vfprintf+0x12e>
    17c6:	83 35       	cpi	r24, 0x53	; 83
    17c8:	09 f0       	breq	.+2      	; 0x17cc <vfprintf+0x118>
    17ca:	59 c0       	rjmp	.+178    	; 0x187e <vfprintf+0x1ca>
    17cc:	21 c0       	rjmp	.+66     	; 0x1810 <vfprintf+0x15c>
    17ce:	f8 01       	movw	r30, r16
    17d0:	80 81       	ld	r24, Z
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	0e 5f       	subi	r16, 0xFE	; 254
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	88 24       	eor	r8, r8
    17da:	83 94       	inc	r8
    17dc:	91 2c       	mov	r9, r1
    17de:	53 01       	movw	r10, r6
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <vfprintf+0x154>
    17e2:	28 01       	movw	r4, r16
    17e4:	f2 e0       	ldi	r31, 0x02	; 2
    17e6:	4f 0e       	add	r4, r31
    17e8:	51 1c       	adc	r5, r1
    17ea:	f8 01       	movw	r30, r16
    17ec:	a0 80       	ld	r10, Z
    17ee:	b1 80       	ldd	r11, Z+1	; 0x01
    17f0:	36 fe       	sbrs	r3, 6
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <vfprintf+0x146>
    17f4:	69 2d       	mov	r22, r9
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <vfprintf+0x14a>
    17fa:	6f ef       	ldi	r22, 0xFF	; 255
    17fc:	7f ef       	ldi	r23, 0xFF	; 255
    17fe:	c5 01       	movw	r24, r10
    1800:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <strnlen>
    1804:	4c 01       	movw	r8, r24
    1806:	82 01       	movw	r16, r4
    1808:	f3 2d       	mov	r31, r3
    180a:	ff 77       	andi	r31, 0x7F	; 127
    180c:	3f 2e       	mov	r3, r31
    180e:	16 c0       	rjmp	.+44     	; 0x183c <vfprintf+0x188>
    1810:	28 01       	movw	r4, r16
    1812:	22 e0       	ldi	r18, 0x02	; 2
    1814:	42 0e       	add	r4, r18
    1816:	51 1c       	adc	r5, r1
    1818:	f8 01       	movw	r30, r16
    181a:	a0 80       	ld	r10, Z
    181c:	b1 80       	ldd	r11, Z+1	; 0x01
    181e:	36 fe       	sbrs	r3, 6
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <vfprintf+0x174>
    1822:	69 2d       	mov	r22, r9
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x178>
    1828:	6f ef       	ldi	r22, 0xFF	; 255
    182a:	7f ef       	ldi	r23, 0xFF	; 255
    182c:	c5 01       	movw	r24, r10
    182e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <strnlen_P>
    1832:	4c 01       	movw	r8, r24
    1834:	f3 2d       	mov	r31, r3
    1836:	f0 68       	ori	r31, 0x80	; 128
    1838:	3f 2e       	mov	r3, r31
    183a:	82 01       	movw	r16, r4
    183c:	33 fc       	sbrc	r3, 3
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <vfprintf+0x1c2>
    1840:	82 2d       	mov	r24, r2
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	88 16       	cp	r8, r24
    1846:	99 06       	cpc	r9, r25
    1848:	b0 f4       	brcc	.+44     	; 0x1876 <vfprintf+0x1c2>
    184a:	b6 01       	movw	r22, r12
    184c:	80 e2       	ldi	r24, 0x20	; 32
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    1854:	2a 94       	dec	r2
    1856:	f4 cf       	rjmp	.-24     	; 0x1840 <vfprintf+0x18c>
    1858:	f5 01       	movw	r30, r10
    185a:	37 fc       	sbrc	r3, 7
    185c:	85 91       	lpm	r24, Z+
    185e:	37 fe       	sbrs	r3, 7
    1860:	81 91       	ld	r24, Z+
    1862:	5f 01       	movw	r10, r30
    1864:	b6 01       	movw	r22, r12
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    186c:	21 10       	cpse	r2, r1
    186e:	2a 94       	dec	r2
    1870:	21 e0       	ldi	r18, 0x01	; 1
    1872:	82 1a       	sub	r8, r18
    1874:	91 08       	sbc	r9, r1
    1876:	81 14       	cp	r8, r1
    1878:	91 04       	cpc	r9, r1
    187a:	71 f7       	brne	.-36     	; 0x1858 <vfprintf+0x1a4>
    187c:	e8 c0       	rjmp	.+464    	; 0x1a4e <vfprintf+0x39a>
    187e:	84 36       	cpi	r24, 0x64	; 100
    1880:	11 f0       	breq	.+4      	; 0x1886 <vfprintf+0x1d2>
    1882:	89 36       	cpi	r24, 0x69	; 105
    1884:	41 f5       	brne	.+80     	; 0x18d6 <vfprintf+0x222>
    1886:	f8 01       	movw	r30, r16
    1888:	37 fe       	sbrs	r3, 7
    188a:	07 c0       	rjmp	.+14     	; 0x189a <vfprintf+0x1e6>
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	0c 5f       	subi	r16, 0xFC	; 252
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <vfprintf+0x1f6>
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	07 2e       	mov	r0, r23
    18a0:	00 0c       	add	r0, r0
    18a2:	88 0b       	sbc	r24, r24
    18a4:	99 0b       	sbc	r25, r25
    18a6:	0e 5f       	subi	r16, 0xFE	; 254
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	f3 2d       	mov	r31, r3
    18ac:	ff 76       	andi	r31, 0x6F	; 111
    18ae:	3f 2e       	mov	r3, r31
    18b0:	97 ff       	sbrs	r25, 7
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <vfprintf+0x212>
    18b4:	90 95       	com	r25
    18b6:	80 95       	com	r24
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	f0 68       	ori	r31, 0x80	; 128
    18c4:	3f 2e       	mov	r3, r31
    18c6:	2a e0       	ldi	r18, 0x0A	; 10
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	a3 01       	movw	r20, r6
    18cc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ultoa_invert>
    18d0:	88 2e       	mov	r8, r24
    18d2:	86 18       	sub	r8, r6
    18d4:	45 c0       	rjmp	.+138    	; 0x1960 <vfprintf+0x2ac>
    18d6:	85 37       	cpi	r24, 0x75	; 117
    18d8:	31 f4       	brne	.+12     	; 0x18e6 <vfprintf+0x232>
    18da:	23 2d       	mov	r18, r3
    18dc:	2f 7e       	andi	r18, 0xEF	; 239
    18de:	b2 2e       	mov	r11, r18
    18e0:	2a e0       	ldi	r18, 0x0A	; 10
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	25 c0       	rjmp	.+74     	; 0x1930 <vfprintf+0x27c>
    18e6:	93 2d       	mov	r25, r3
    18e8:	99 7f       	andi	r25, 0xF9	; 249
    18ea:	b9 2e       	mov	r11, r25
    18ec:	8f 36       	cpi	r24, 0x6F	; 111
    18ee:	c1 f0       	breq	.+48     	; 0x1920 <vfprintf+0x26c>
    18f0:	18 f4       	brcc	.+6      	; 0x18f8 <vfprintf+0x244>
    18f2:	88 35       	cpi	r24, 0x58	; 88
    18f4:	79 f0       	breq	.+30     	; 0x1914 <vfprintf+0x260>
    18f6:	b5 c0       	rjmp	.+362    	; 0x1a62 <vfprintf+0x3ae>
    18f8:	80 37       	cpi	r24, 0x70	; 112
    18fa:	19 f0       	breq	.+6      	; 0x1902 <vfprintf+0x24e>
    18fc:	88 37       	cpi	r24, 0x78	; 120
    18fe:	21 f0       	breq	.+8      	; 0x1908 <vfprintf+0x254>
    1900:	b0 c0       	rjmp	.+352    	; 0x1a62 <vfprintf+0x3ae>
    1902:	e9 2f       	mov	r30, r25
    1904:	e0 61       	ori	r30, 0x10	; 16
    1906:	be 2e       	mov	r11, r30
    1908:	b4 fe       	sbrs	r11, 4
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vfprintf+0x272>
    190c:	fb 2d       	mov	r31, r11
    190e:	f4 60       	ori	r31, 0x04	; 4
    1910:	bf 2e       	mov	r11, r31
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <vfprintf+0x272>
    1914:	34 fe       	sbrs	r3, 4
    1916:	0a c0       	rjmp	.+20     	; 0x192c <vfprintf+0x278>
    1918:	29 2f       	mov	r18, r25
    191a:	26 60       	ori	r18, 0x06	; 6
    191c:	b2 2e       	mov	r11, r18
    191e:	06 c0       	rjmp	.+12     	; 0x192c <vfprintf+0x278>
    1920:	28 e0       	ldi	r18, 0x08	; 8
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <vfprintf+0x27c>
    1926:	20 e1       	ldi	r18, 0x10	; 16
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <vfprintf+0x27c>
    192c:	20 e1       	ldi	r18, 0x10	; 16
    192e:	32 e0       	ldi	r19, 0x02	; 2
    1930:	f8 01       	movw	r30, r16
    1932:	b7 fe       	sbrs	r11, 7
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <vfprintf+0x290>
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	0c 5f       	subi	r16, 0xFC	; 252
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <vfprintf+0x29c>
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 5f       	subi	r16, 0xFE	; 254
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	a3 01       	movw	r20, r6
    1952:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__ultoa_invert>
    1956:	88 2e       	mov	r8, r24
    1958:	86 18       	sub	r8, r6
    195a:	fb 2d       	mov	r31, r11
    195c:	ff 77       	andi	r31, 0x7F	; 127
    195e:	3f 2e       	mov	r3, r31
    1960:	36 fe       	sbrs	r3, 6
    1962:	0d c0       	rjmp	.+26     	; 0x197e <vfprintf+0x2ca>
    1964:	23 2d       	mov	r18, r3
    1966:	2e 7f       	andi	r18, 0xFE	; 254
    1968:	a2 2e       	mov	r10, r18
    196a:	89 14       	cp	r8, r9
    196c:	58 f4       	brcc	.+22     	; 0x1984 <vfprintf+0x2d0>
    196e:	34 fe       	sbrs	r3, 4
    1970:	0b c0       	rjmp	.+22     	; 0x1988 <vfprintf+0x2d4>
    1972:	32 fc       	sbrc	r3, 2
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <vfprintf+0x2d4>
    1976:	83 2d       	mov	r24, r3
    1978:	8e 7e       	andi	r24, 0xEE	; 238
    197a:	a8 2e       	mov	r10, r24
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <vfprintf+0x2d4>
    197e:	b8 2c       	mov	r11, r8
    1980:	a3 2c       	mov	r10, r3
    1982:	03 c0       	rjmp	.+6      	; 0x198a <vfprintf+0x2d6>
    1984:	b8 2c       	mov	r11, r8
    1986:	01 c0       	rjmp	.+2      	; 0x198a <vfprintf+0x2d6>
    1988:	b9 2c       	mov	r11, r9
    198a:	a4 fe       	sbrs	r10, 4
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <vfprintf+0x2f8>
    198e:	fe 01       	movw	r30, r28
    1990:	e8 0d       	add	r30, r8
    1992:	f1 1d       	adc	r31, r1
    1994:	80 81       	ld	r24, Z
    1996:	80 33       	cpi	r24, 0x30	; 48
    1998:	21 f4       	brne	.+8      	; 0x19a2 <vfprintf+0x2ee>
    199a:	9a 2d       	mov	r25, r10
    199c:	99 7e       	andi	r25, 0xE9	; 233
    199e:	a9 2e       	mov	r10, r25
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <vfprintf+0x300>
    19a2:	a2 fe       	sbrs	r10, 2
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <vfprintf+0x2fe>
    19a6:	b3 94       	inc	r11
    19a8:	b3 94       	inc	r11
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <vfprintf+0x300>
    19ac:	8a 2d       	mov	r24, r10
    19ae:	86 78       	andi	r24, 0x86	; 134
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <vfprintf+0x300>
    19b2:	b3 94       	inc	r11
    19b4:	a3 fc       	sbrc	r10, 3
    19b6:	11 c0       	rjmp	.+34     	; 0x19da <vfprintf+0x326>
    19b8:	a0 fe       	sbrs	r10, 0
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x314>
    19bc:	b2 14       	cp	r11, r2
    19be:	88 f4       	brcc	.+34     	; 0x19e2 <vfprintf+0x32e>
    19c0:	28 0c       	add	r2, r8
    19c2:	92 2c       	mov	r9, r2
    19c4:	9b 18       	sub	r9, r11
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <vfprintf+0x330>
    19c8:	b2 14       	cp	r11, r2
    19ca:	60 f4       	brcc	.+24     	; 0x19e4 <vfprintf+0x330>
    19cc:	b6 01       	movw	r22, r12
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    19d6:	b3 94       	inc	r11
    19d8:	f7 cf       	rjmp	.-18     	; 0x19c8 <vfprintf+0x314>
    19da:	b2 14       	cp	r11, r2
    19dc:	18 f4       	brcc	.+6      	; 0x19e4 <vfprintf+0x330>
    19de:	2b 18       	sub	r2, r11
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <vfprintf+0x332>
    19e2:	98 2c       	mov	r9, r8
    19e4:	21 2c       	mov	r2, r1
    19e6:	a4 fe       	sbrs	r10, 4
    19e8:	10 c0       	rjmp	.+32     	; 0x1a0a <vfprintf+0x356>
    19ea:	b6 01       	movw	r22, r12
    19ec:	80 e3       	ldi	r24, 0x30	; 48
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    19f4:	a2 fe       	sbrs	r10, 2
    19f6:	17 c0       	rjmp	.+46     	; 0x1a26 <vfprintf+0x372>
    19f8:	a1 fc       	sbrc	r10, 1
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x34e>
    19fc:	88 e7       	ldi	r24, 0x78	; 120
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x352>
    1a02:	88 e5       	ldi	r24, 0x58	; 88
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	b6 01       	movw	r22, r12
    1a08:	0c c0       	rjmp	.+24     	; 0x1a22 <vfprintf+0x36e>
    1a0a:	8a 2d       	mov	r24, r10
    1a0c:	86 78       	andi	r24, 0x86	; 134
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <vfprintf+0x372>
    1a10:	a1 fe       	sbrs	r10, 1
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <vfprintf+0x364>
    1a14:	8b e2       	ldi	r24, 0x2B	; 43
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <vfprintf+0x366>
    1a18:	80 e2       	ldi	r24, 0x20	; 32
    1a1a:	a7 fc       	sbrc	r10, 7
    1a1c:	8d e2       	ldi	r24, 0x2D	; 45
    1a1e:	b6 01       	movw	r22, r12
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    1a26:	89 14       	cp	r8, r9
    1a28:	38 f4       	brcc	.+14     	; 0x1a38 <vfprintf+0x384>
    1a2a:	b6 01       	movw	r22, r12
    1a2c:	80 e3       	ldi	r24, 0x30	; 48
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    1a34:	9a 94       	dec	r9
    1a36:	f7 cf       	rjmp	.-18     	; 0x1a26 <vfprintf+0x372>
    1a38:	8a 94       	dec	r8
    1a3a:	f3 01       	movw	r30, r6
    1a3c:	e8 0d       	add	r30, r8
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	80 81       	ld	r24, Z
    1a42:	b6 01       	movw	r22, r12
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    1a4a:	81 10       	cpse	r8, r1
    1a4c:	f5 cf       	rjmp	.-22     	; 0x1a38 <vfprintf+0x384>
    1a4e:	22 20       	and	r2, r2
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <vfprintf+0x3a0>
    1a52:	42 ce       	rjmp	.-892    	; 0x16d8 <vfprintf+0x24>
    1a54:	b6 01       	movw	r22, r12
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fputc>
    1a5e:	2a 94       	dec	r2
    1a60:	f6 cf       	rjmp	.-20     	; 0x1a4e <vfprintf+0x39a>
    1a62:	f6 01       	movw	r30, r12
    1a64:	86 81       	ldd	r24, Z+6	; 0x06
    1a66:	97 81       	ldd	r25, Z+7	; 0x07
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <vfprintf+0x3ba>
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	2b 96       	adiw	r28, 0x0b	; 11
    1a70:	e2 e1       	ldi	r30, 0x12	; 18
    1a72:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__>

00001a76 <strnlen_P>:
    1a76:	fc 01       	movw	r30, r24
    1a78:	05 90       	lpm	r0, Z+
    1a7a:	61 50       	subi	r22, 0x01	; 1
    1a7c:	70 40       	sbci	r23, 0x00	; 0
    1a7e:	01 10       	cpse	r0, r1
    1a80:	d8 f7       	brcc	.-10     	; 0x1a78 <strnlen_P+0x2>
    1a82:	80 95       	com	r24
    1a84:	90 95       	com	r25
    1a86:	8e 0f       	add	r24, r30
    1a88:	9f 1f       	adc	r25, r31
    1a8a:	08 95       	ret

00001a8c <strnlen>:
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	61 50       	subi	r22, 0x01	; 1
    1a90:	70 40       	sbci	r23, 0x00	; 0
    1a92:	01 90       	ld	r0, Z+
    1a94:	01 10       	cpse	r0, r1
    1a96:	d8 f7       	brcc	.-10     	; 0x1a8e <strnlen+0x2>
    1a98:	80 95       	com	r24
    1a9a:	90 95       	com	r25
    1a9c:	8e 0f       	add	r24, r30
    1a9e:	9f 1f       	adc	r25, r31
    1aa0:	08 95       	ret

00001aa2 <fputc>:
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	fb 01       	movw	r30, r22
    1aac:	23 81       	ldd	r18, Z+3	; 0x03
    1aae:	21 fd       	sbrc	r18, 1
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <fputc+0x16>
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	9f ef       	ldi	r25, 0xFF	; 255
    1ab6:	2c c0       	rjmp	.+88     	; 0x1b10 <fputc+0x6e>
    1ab8:	22 ff       	sbrs	r18, 2
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <fputc+0x46>
    1abc:	46 81       	ldd	r20, Z+6	; 0x06
    1abe:	57 81       	ldd	r21, Z+7	; 0x07
    1ac0:	24 81       	ldd	r18, Z+4	; 0x04
    1ac2:	35 81       	ldd	r19, Z+5	; 0x05
    1ac4:	42 17       	cp	r20, r18
    1ac6:	53 07       	cpc	r21, r19
    1ac8:	44 f4       	brge	.+16     	; 0x1ada <fputc+0x38>
    1aca:	a0 81       	ld	r26, Z
    1acc:	b1 81       	ldd	r27, Z+1	; 0x01
    1ace:	9d 01       	movw	r18, r26
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	31 83       	std	Z+1, r19	; 0x01
    1ad6:	20 83       	st	Z, r18
    1ad8:	8c 93       	st	X, r24
    1ada:	26 81       	ldd	r18, Z+6	; 0x06
    1adc:	37 81       	ldd	r19, Z+7	; 0x07
    1ade:	2f 5f       	subi	r18, 0xFF	; 255
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	37 83       	std	Z+7, r19	; 0x07
    1ae4:	26 83       	std	Z+6, r18	; 0x06
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <fputc+0x6e>
    1ae8:	8b 01       	movw	r16, r22
    1aea:	ec 01       	movw	r28, r24
    1aec:	fb 01       	movw	r30, r22
    1aee:	00 84       	ldd	r0, Z+8	; 0x08
    1af0:	f1 85       	ldd	r31, Z+9	; 0x09
    1af2:	e0 2d       	mov	r30, r0
    1af4:	09 95       	icall
    1af6:	89 2b       	or	r24, r25
    1af8:	e1 f6       	brne	.-72     	; 0x1ab2 <fputc+0x10>
    1afa:	d8 01       	movw	r26, r16
    1afc:	16 96       	adiw	r26, 0x06	; 6
    1afe:	8d 91       	ld	r24, X+
    1b00:	9c 91       	ld	r25, X
    1b02:	17 97       	sbiw	r26, 0x07	; 7
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	17 96       	adiw	r26, 0x07	; 7
    1b08:	9c 93       	st	X, r25
    1b0a:	8e 93       	st	-X, r24
    1b0c:	16 97       	sbiw	r26, 0x06	; 6
    1b0e:	ce 01       	movw	r24, r28
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <__ultoa_invert>:
    1b1a:	fa 01       	movw	r30, r20
    1b1c:	aa 27       	eor	r26, r26
    1b1e:	28 30       	cpi	r18, 0x08	; 8
    1b20:	51 f1       	breq	.+84     	; 0x1b76 <__ultoa_invert+0x5c>
    1b22:	20 31       	cpi	r18, 0x10	; 16
    1b24:	81 f1       	breq	.+96     	; 0x1b86 <__ultoa_invert+0x6c>
    1b26:	e8 94       	clt
    1b28:	6f 93       	push	r22
    1b2a:	6e 7f       	andi	r22, 0xFE	; 254
    1b2c:	6e 5f       	subi	r22, 0xFE	; 254
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	af 4f       	sbci	r26, 0xFF	; 255
    1b36:	b1 e0       	ldi	r27, 0x01	; 1
    1b38:	3e d0       	rcall	.+124    	; 0x1bb6 <__ultoa_invert+0x9c>
    1b3a:	b4 e0       	ldi	r27, 0x04	; 4
    1b3c:	3c d0       	rcall	.+120    	; 0x1bb6 <__ultoa_invert+0x9c>
    1b3e:	67 0f       	add	r22, r23
    1b40:	78 1f       	adc	r23, r24
    1b42:	89 1f       	adc	r24, r25
    1b44:	9a 1f       	adc	r25, r26
    1b46:	a1 1d       	adc	r26, r1
    1b48:	68 0f       	add	r22, r24
    1b4a:	79 1f       	adc	r23, r25
    1b4c:	8a 1f       	adc	r24, r26
    1b4e:	91 1d       	adc	r25, r1
    1b50:	a1 1d       	adc	r26, r1
    1b52:	6a 0f       	add	r22, r26
    1b54:	71 1d       	adc	r23, r1
    1b56:	81 1d       	adc	r24, r1
    1b58:	91 1d       	adc	r25, r1
    1b5a:	a1 1d       	adc	r26, r1
    1b5c:	20 d0       	rcall	.+64     	; 0x1b9e <__ultoa_invert+0x84>
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <__ultoa_invert+0x48>
    1b60:	68 94       	set
    1b62:	3f 91       	pop	r19
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	26 9f       	mul	r18, r22
    1b68:	11 24       	eor	r1, r1
    1b6a:	30 19       	sub	r19, r0
    1b6c:	30 5d       	subi	r19, 0xD0	; 208
    1b6e:	31 93       	st	Z+, r19
    1b70:	de f6       	brtc	.-74     	; 0x1b28 <__ultoa_invert+0xe>
    1b72:	cf 01       	movw	r24, r30
    1b74:	08 95       	ret
    1b76:	46 2f       	mov	r20, r22
    1b78:	47 70       	andi	r20, 0x07	; 7
    1b7a:	40 5d       	subi	r20, 0xD0	; 208
    1b7c:	41 93       	st	Z+, r20
    1b7e:	b3 e0       	ldi	r27, 0x03	; 3
    1b80:	0f d0       	rcall	.+30     	; 0x1ba0 <__ultoa_invert+0x86>
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <__ultoa_invert+0x5c>
    1b84:	f6 cf       	rjmp	.-20     	; 0x1b72 <__ultoa_invert+0x58>
    1b86:	46 2f       	mov	r20, r22
    1b88:	4f 70       	andi	r20, 0x0F	; 15
    1b8a:	40 5d       	subi	r20, 0xD0	; 208
    1b8c:	4a 33       	cpi	r20, 0x3A	; 58
    1b8e:	18 f0       	brcs	.+6      	; 0x1b96 <__ultoa_invert+0x7c>
    1b90:	49 5d       	subi	r20, 0xD9	; 217
    1b92:	31 fd       	sbrc	r19, 1
    1b94:	40 52       	subi	r20, 0x20	; 32
    1b96:	41 93       	st	Z+, r20
    1b98:	02 d0       	rcall	.+4      	; 0x1b9e <__ultoa_invert+0x84>
    1b9a:	a9 f7       	brne	.-22     	; 0x1b86 <__ultoa_invert+0x6c>
    1b9c:	ea cf       	rjmp	.-44     	; 0x1b72 <__ultoa_invert+0x58>
    1b9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ba0:	a6 95       	lsr	r26
    1ba2:	97 95       	ror	r25
    1ba4:	87 95       	ror	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	ba 95       	dec	r27
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <__ultoa_invert+0x86>
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	61 05       	cpc	r22, r1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	08 95       	ret
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
    1bba:	0a 2e       	mov	r0, r26
    1bbc:	06 94       	lsr	r0
    1bbe:	57 95       	ror	r21
    1bc0:	47 95       	ror	r20
    1bc2:	37 95       	ror	r19
    1bc4:	27 95       	ror	r18
    1bc6:	ba 95       	dec	r27
    1bc8:	c9 f7       	brne	.-14     	; 0x1bbc <__ultoa_invert+0xa2>
    1bca:	62 0f       	add	r22, r18
    1bcc:	73 1f       	adc	r23, r19
    1bce:	84 1f       	adc	r24, r20
    1bd0:	95 1f       	adc	r25, r21
    1bd2:	a0 1d       	adc	r26, r0
    1bd4:	08 95       	ret

00001bd6 <__prologue_saves__>:
    1bd6:	2f 92       	push	r2
    1bd8:	3f 92       	push	r3
    1bda:	4f 92       	push	r4
    1bdc:	5f 92       	push	r5
    1bde:	6f 92       	push	r6
    1be0:	7f 92       	push	r7
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	ca 1b       	sub	r28, r26
    1c00:	db 0b       	sbc	r29, r27
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	09 94       	ijmp

00001c0e <__epilogue_restores__>:
    1c0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c10:	39 88       	ldd	r3, Y+17	; 0x11
    1c12:	48 88       	ldd	r4, Y+16	; 0x10
    1c14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c20:	b9 84       	ldd	r11, Y+9	; 0x09
    1c22:	c8 84       	ldd	r12, Y+8	; 0x08
    1c24:	df 80       	ldd	r13, Y+7	; 0x07
    1c26:	ee 80       	ldd	r14, Y+6	; 0x06
    1c28:	fd 80       	ldd	r15, Y+5	; 0x05
    1c2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c30:	b9 81       	ldd	r27, Y+1	; 0x01
    1c32:	ce 0f       	add	r28, r30
    1c34:	d1 1d       	adc	r29, r1
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	ed 01       	movw	r28, r26
    1c42:	08 95       	ret

00001c44 <_exit>:
    1c44:	f8 94       	cli

00001c46 <__stop_program>:
    1c46:	ff cf       	rjmp	.-2      	; 0x1c46 <__stop_program>
